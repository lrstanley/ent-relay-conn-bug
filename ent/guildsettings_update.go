// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guildsettings"
	"github.com/lrstanley/ent-relay-conn-bug/ent/predicate"
)

// GuildSettingsUpdate is the builder for updating GuildSettings entities.
type GuildSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *GuildSettingsMutation
}

// Where appends a list predicates to the GuildSettingsUpdate builder.
func (gsu *GuildSettingsUpdate) Where(ps ...predicate.GuildSettings) *GuildSettingsUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetUpdateTime sets the "update_time" field.
func (gsu *GuildSettingsUpdate) SetUpdateTime(t time.Time) *GuildSettingsUpdate {
	gsu.mutation.SetUpdateTime(t)
	return gsu
}

// SetEnabled sets the "enabled" field.
func (gsu *GuildSettingsUpdate) SetEnabled(b bool) *GuildSettingsUpdate {
	gsu.mutation.SetEnabled(b)
	return gsu
}

// SetDefaultMaxClones sets the "default_max_clones" field.
func (gsu *GuildSettingsUpdate) SetDefaultMaxClones(i int) *GuildSettingsUpdate {
	gsu.mutation.ResetDefaultMaxClones()
	gsu.mutation.SetDefaultMaxClones(i)
	return gsu
}

// SetNillableDefaultMaxClones sets the "default_max_clones" field if the given value is not nil.
func (gsu *GuildSettingsUpdate) SetNillableDefaultMaxClones(i *int) *GuildSettingsUpdate {
	if i != nil {
		gsu.SetDefaultMaxClones(*i)
	}
	return gsu
}

// AddDefaultMaxClones adds i to the "default_max_clones" field.
func (gsu *GuildSettingsUpdate) AddDefaultMaxClones(i int) *GuildSettingsUpdate {
	gsu.mutation.AddDefaultMaxClones(i)
	return gsu
}

// ClearDefaultMaxClones clears the value of the "default_max_clones" field.
func (gsu *GuildSettingsUpdate) ClearDefaultMaxClones() *GuildSettingsUpdate {
	gsu.mutation.ClearDefaultMaxClones()
	return gsu
}

// SetRegexMatch sets the "regex_match" field.
func (gsu *GuildSettingsUpdate) SetRegexMatch(s string) *GuildSettingsUpdate {
	gsu.mutation.SetRegexMatch(s)
	return gsu
}

// SetNillableRegexMatch sets the "regex_match" field if the given value is not nil.
func (gsu *GuildSettingsUpdate) SetNillableRegexMatch(s *string) *GuildSettingsUpdate {
	if s != nil {
		gsu.SetRegexMatch(*s)
	}
	return gsu
}

// ClearRegexMatch clears the value of the "regex_match" field.
func (gsu *GuildSettingsUpdate) ClearRegexMatch() *GuildSettingsUpdate {
	gsu.mutation.ClearRegexMatch()
	return gsu
}

// SetContactEmail sets the "contact_email" field.
func (gsu *GuildSettingsUpdate) SetContactEmail(s string) *GuildSettingsUpdate {
	gsu.mutation.SetContactEmail(s)
	return gsu
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (gsu *GuildSettingsUpdate) SetNillableContactEmail(s *string) *GuildSettingsUpdate {
	if s != nil {
		gsu.SetContactEmail(*s)
	}
	return gsu
}

// ClearContactEmail clears the value of the "contact_email" field.
func (gsu *GuildSettingsUpdate) ClearContactEmail() *GuildSettingsUpdate {
	gsu.mutation.ClearContactEmail()
	return gsu
}

// Mutation returns the GuildSettingsMutation object of the builder.
func (gsu *GuildSettingsUpdate) Mutation() *GuildSettingsMutation {
	return gsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GuildSettingsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gsu.defaults(); err != nil {
		return 0, err
	}
	if len(gsu.hooks) == 0 {
		if err = gsu.check(); err != nil {
			return 0, err
		}
		affected, err = gsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildSettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsu.check(); err != nil {
				return 0, err
			}
			gsu.mutation = mutation
			affected, err = gsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gsu.hooks) - 1; i >= 0; i-- {
			if gsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GuildSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GuildSettingsUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GuildSettingsUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsu *GuildSettingsUpdate) defaults() error {
	if _, ok := gsu.mutation.UpdateTime(); !ok {
		if guildsettings.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guildsettings.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guildsettings.UpdateDefaultUpdateTime()
		gsu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gsu *GuildSettingsUpdate) check() error {
	if v, ok := gsu.mutation.RegexMatch(); ok {
		if err := guildsettings.RegexMatchValidator(v); err != nil {
			return &ValidationError{Name: "regex_match", err: fmt.Errorf(`ent: validator failed for field "GuildSettings.regex_match": %w`, err)}
		}
	}
	if v, ok := gsu.mutation.ContactEmail(); ok {
		if err := guildsettings.ContactEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_email", err: fmt.Errorf(`ent: validator failed for field "GuildSettings.contact_email": %w`, err)}
		}
	}
	if _, ok := gsu.mutation.GuildID(); gsu.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GuildSettings.guild"`)
	}
	return nil
}

func (gsu *GuildSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildsettings.Table,
			Columns: guildsettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guildsettings.FieldID,
			},
		},
	}
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guildsettings.FieldUpdateTime,
		})
	}
	if value, ok := gsu.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: guildsettings.FieldEnabled,
		})
	}
	if value, ok := gsu.mutation.DefaultMaxClones(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guildsettings.FieldDefaultMaxClones,
		})
	}
	if value, ok := gsu.mutation.AddedDefaultMaxClones(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guildsettings.FieldDefaultMaxClones,
		})
	}
	if gsu.mutation.DefaultMaxClonesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: guildsettings.FieldDefaultMaxClones,
		})
	}
	if value, ok := gsu.mutation.RegexMatch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildsettings.FieldRegexMatch,
		})
	}
	if gsu.mutation.RegexMatchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guildsettings.FieldRegexMatch,
		})
	}
	if value, ok := gsu.mutation.ContactEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildsettings.FieldContactEmail,
		})
	}
	if gsu.mutation.ContactEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guildsettings.FieldContactEmail,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GuildSettingsUpdateOne is the builder for updating a single GuildSettings entity.
type GuildSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildSettingsMutation
}

// SetUpdateTime sets the "update_time" field.
func (gsuo *GuildSettingsUpdateOne) SetUpdateTime(t time.Time) *GuildSettingsUpdateOne {
	gsuo.mutation.SetUpdateTime(t)
	return gsuo
}

// SetEnabled sets the "enabled" field.
func (gsuo *GuildSettingsUpdateOne) SetEnabled(b bool) *GuildSettingsUpdateOne {
	gsuo.mutation.SetEnabled(b)
	return gsuo
}

// SetDefaultMaxClones sets the "default_max_clones" field.
func (gsuo *GuildSettingsUpdateOne) SetDefaultMaxClones(i int) *GuildSettingsUpdateOne {
	gsuo.mutation.ResetDefaultMaxClones()
	gsuo.mutation.SetDefaultMaxClones(i)
	return gsuo
}

// SetNillableDefaultMaxClones sets the "default_max_clones" field if the given value is not nil.
func (gsuo *GuildSettingsUpdateOne) SetNillableDefaultMaxClones(i *int) *GuildSettingsUpdateOne {
	if i != nil {
		gsuo.SetDefaultMaxClones(*i)
	}
	return gsuo
}

// AddDefaultMaxClones adds i to the "default_max_clones" field.
func (gsuo *GuildSettingsUpdateOne) AddDefaultMaxClones(i int) *GuildSettingsUpdateOne {
	gsuo.mutation.AddDefaultMaxClones(i)
	return gsuo
}

// ClearDefaultMaxClones clears the value of the "default_max_clones" field.
func (gsuo *GuildSettingsUpdateOne) ClearDefaultMaxClones() *GuildSettingsUpdateOne {
	gsuo.mutation.ClearDefaultMaxClones()
	return gsuo
}

// SetRegexMatch sets the "regex_match" field.
func (gsuo *GuildSettingsUpdateOne) SetRegexMatch(s string) *GuildSettingsUpdateOne {
	gsuo.mutation.SetRegexMatch(s)
	return gsuo
}

// SetNillableRegexMatch sets the "regex_match" field if the given value is not nil.
func (gsuo *GuildSettingsUpdateOne) SetNillableRegexMatch(s *string) *GuildSettingsUpdateOne {
	if s != nil {
		gsuo.SetRegexMatch(*s)
	}
	return gsuo
}

// ClearRegexMatch clears the value of the "regex_match" field.
func (gsuo *GuildSettingsUpdateOne) ClearRegexMatch() *GuildSettingsUpdateOne {
	gsuo.mutation.ClearRegexMatch()
	return gsuo
}

// SetContactEmail sets the "contact_email" field.
func (gsuo *GuildSettingsUpdateOne) SetContactEmail(s string) *GuildSettingsUpdateOne {
	gsuo.mutation.SetContactEmail(s)
	return gsuo
}

// SetNillableContactEmail sets the "contact_email" field if the given value is not nil.
func (gsuo *GuildSettingsUpdateOne) SetNillableContactEmail(s *string) *GuildSettingsUpdateOne {
	if s != nil {
		gsuo.SetContactEmail(*s)
	}
	return gsuo
}

// ClearContactEmail clears the value of the "contact_email" field.
func (gsuo *GuildSettingsUpdateOne) ClearContactEmail() *GuildSettingsUpdateOne {
	gsuo.mutation.ClearContactEmail()
	return gsuo
}

// Mutation returns the GuildSettingsMutation object of the builder.
func (gsuo *GuildSettingsUpdateOne) Mutation() *GuildSettingsMutation {
	return gsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GuildSettingsUpdateOne) Select(field string, fields ...string) *GuildSettingsUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GuildSettings entity.
func (gsuo *GuildSettingsUpdateOne) Save(ctx context.Context) (*GuildSettings, error) {
	var (
		err  error
		node *GuildSettings
	)
	if err := gsuo.defaults(); err != nil {
		return nil, err
	}
	if len(gsuo.hooks) == 0 {
		if err = gsuo.check(); err != nil {
			return nil, err
		}
		node, err = gsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildSettingsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gsuo.check(); err != nil {
				return nil, err
			}
			gsuo.mutation = mutation
			node, err = gsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gsuo.hooks) - 1; i >= 0; i-- {
			if gsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GuildSettings)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GuildSettingsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GuildSettingsUpdateOne) SaveX(ctx context.Context) *GuildSettings {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GuildSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GuildSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsuo *GuildSettingsUpdateOne) defaults() error {
	if _, ok := gsuo.mutation.UpdateTime(); !ok {
		if guildsettings.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guildsettings.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guildsettings.UpdateDefaultUpdateTime()
		gsuo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gsuo *GuildSettingsUpdateOne) check() error {
	if v, ok := gsuo.mutation.RegexMatch(); ok {
		if err := guildsettings.RegexMatchValidator(v); err != nil {
			return &ValidationError{Name: "regex_match", err: fmt.Errorf(`ent: validator failed for field "GuildSettings.regex_match": %w`, err)}
		}
	}
	if v, ok := gsuo.mutation.ContactEmail(); ok {
		if err := guildsettings.ContactEmailValidator(v); err != nil {
			return &ValidationError{Name: "contact_email", err: fmt.Errorf(`ent: validator failed for field "GuildSettings.contact_email": %w`, err)}
		}
	}
	if _, ok := gsuo.mutation.GuildID(); gsuo.mutation.GuildCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GuildSettings.guild"`)
	}
	return nil
}

func (gsuo *GuildSettingsUpdateOne) sqlSave(ctx context.Context) (_node *GuildSettings, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guildsettings.Table,
			Columns: guildsettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guildsettings.FieldID,
			},
		},
	}
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GuildSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guildsettings.FieldID)
		for _, f := range fields {
			if !guildsettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guildsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guildsettings.FieldUpdateTime,
		})
	}
	if value, ok := gsuo.mutation.Enabled(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: guildsettings.FieldEnabled,
		})
	}
	if value, ok := gsuo.mutation.DefaultMaxClones(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guildsettings.FieldDefaultMaxClones,
		})
	}
	if value, ok := gsuo.mutation.AddedDefaultMaxClones(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guildsettings.FieldDefaultMaxClones,
		})
	}
	if gsuo.mutation.DefaultMaxClonesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: guildsettings.FieldDefaultMaxClones,
		})
	}
	if value, ok := gsuo.mutation.RegexMatch(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildsettings.FieldRegexMatch,
		})
	}
	if gsuo.mutation.RegexMatchCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guildsettings.FieldRegexMatch,
		})
	}
	if value, ok := gsuo.mutation.ContactEmail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guildsettings.FieldContactEmail,
		})
	}
	if gsuo.mutation.ContactEmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guildsettings.FieldContactEmail,
		})
	}
	_node = &GuildSettings{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guildsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
