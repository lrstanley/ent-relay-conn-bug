// Code generated by ent, DO NOT EDIT.

package guildsettings

import (
	"time"
)

const (
	// Label holds the string label denoting the guildsettings type in the database.
	Label = "guild_settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldDefaultMaxClones holds the string denoting the default_max_clones field in the database.
	FieldDefaultMaxClones = "default_max_clones"
	// FieldRegexMatch holds the string denoting the regex_match field in the database.
	FieldRegexMatch = "regex_match"
	// FieldContactEmail holds the string denoting the contact_email field in the database.
	FieldContactEmail = "contact_email"
	// EdgeGuild holds the string denoting the guild edge name in mutations.
	EdgeGuild = "guild"
	// Table holds the table name of the guildsettings in the database.
	Table = "guild_settings"
	// GuildTable is the table that holds the guild relation/edge.
	GuildTable = "guild_settings"
	// GuildInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	GuildInverseTable = "guilds"
	// GuildColumn is the table column denoting the guild relation/edge.
	GuildColumn = "guild_guild_settings"
)

// Columns holds all SQL columns for guildsettings fields.
var Columns = []string{
	FieldID,
	FieldCreateTime,
	FieldUpdateTime,
	FieldEnabled,
	FieldDefaultMaxClones,
	FieldRegexMatch,
	FieldContactEmail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "guild_settings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"guild_guild_settings",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
	// DefaultDefaultMaxClones holds the default value on creation for the "default_max_clones" field.
	DefaultDefaultMaxClones int
	// DefaultRegexMatch holds the default value on creation for the "regex_match" field.
	DefaultRegexMatch string
	// RegexMatchValidator is a validator for the "regex_match" field. It is called by the builders before save.
	RegexMatchValidator func(string) error
	// DefaultContactEmail holds the default value on creation for the "contact_email" field.
	DefaultContactEmail string
	// ContactEmailValidator is a validator for the "contact_email" field. It is called by the builders before save.
	ContactEmailValidator func(string) error
)
