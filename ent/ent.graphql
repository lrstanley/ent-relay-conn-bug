directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Guild implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """Guild id."""
  guildID: String!
  """Guild name (2-100 chars, excl. trailing/leading spaces)."""
  name: String!
  """Enabled guild features."""
  features: [String!]
  """Icon hash."""
  iconHash: String
  iconURL: String!
  """When the bot joined the guild."""
  joinedAt: Time!
  """True if the guild is considered large (according to Discord standards)."""
  large: Boolean
  """Total number of members in the guild."""
  memberCount: Int
  """Discord snowflake ID of the user that owns the guild."""
  ownerID: String!
  """Permissions of the bot on this guild (excludes overrides)."""
  permissions: Uint64
  """Region of the guild."""
  region: String
  """System channel flags."""
  systemChannelFlags: String
  guildSettings: GuildSettings
}
"""A connection to a list of items."""
type GuildConnection {
  """A list of edges."""
  edges: [GuildEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GuildEdge {
  """The item at the end of the edge."""
  node: Guild
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Guild connections"""
input GuildOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Guilds."""
  field: GuildOrderField!
}
"""Properties by which Guild connections can be ordered."""
enum GuildOrderField {
  NAME
  JOINED_AT
}
type GuildSettings implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """True if the guild should be monitored/acted upon."""
  enabled: Boolean!
  """Default max cloned channels for the guild."""
  defaultMaxClones: Int
  """Regex match for channel names."""
  regexMatch: String
  """Contact email for the guild."""
  contactEmail: String
  guild: Guild!
}
"""A connection to a list of items."""
type GuildSettingsConnection {
  """A list of edges."""
  edges: [GuildSettingsEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GuildSettingsEdge {
  """The item at the end of the edge."""
  node: GuildSettings
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
GuildSettingsWhereInput is used for filtering GuildSettings objects.
Input was generated by ent.
"""
input GuildSettingsWhereInput {
  not: GuildSettingsWhereInput
  and: [GuildSettingsWhereInput!]
  or: [GuildSettingsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """default_max_clones field predicates"""
  defaultMaxClones: Int
  defaultMaxClonesNEQ: Int
  defaultMaxClonesIn: [Int!]
  defaultMaxClonesNotIn: [Int!]
  defaultMaxClonesGT: Int
  defaultMaxClonesGTE: Int
  defaultMaxClonesLT: Int
  defaultMaxClonesLTE: Int
  defaultMaxClonesIsNil: Boolean
  defaultMaxClonesNotNil: Boolean
  """regex_match field predicates"""
  regexMatch: String
  regexMatchNEQ: String
  regexMatchIn: [String!]
  regexMatchNotIn: [String!]
  regexMatchGT: String
  regexMatchGTE: String
  regexMatchLT: String
  regexMatchLTE: String
  regexMatchContains: String
  regexMatchHasPrefix: String
  regexMatchHasSuffix: String
  regexMatchIsNil: Boolean
  regexMatchNotNil: Boolean
  regexMatchEqualFold: String
  regexMatchContainsFold: String
  """contact_email field predicates"""
  contactEmail: String
  contactEmailNEQ: String
  contactEmailIn: [String!]
  contactEmailNotIn: [String!]
  contactEmailGT: String
  contactEmailGTE: String
  contactEmailLT: String
  contactEmailLTE: String
  contactEmailContains: String
  contactEmailHasPrefix: String
  contactEmailHasSuffix: String
  contactEmailIsNil: Boolean
  contactEmailNotNil: Boolean
  contactEmailEqualFold: String
  contactEmailContainsFold: String
  """guild edge predicates"""
  hasGuild: Boolean
  hasGuildWith: [GuildWhereInput!]
}
"""
GuildWhereInput is used for filtering Guild objects.
Input was generated by ent.
"""
input GuildWhereInput {
  not: GuildWhereInput
  and: [GuildWhereInput!]
  or: [GuildWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """create_time field predicates"""
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """update_time field predicates"""
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """guild_id field predicates"""
  guildID: String
  guildIDNEQ: String
  guildIDIn: [String!]
  guildIDNotIn: [String!]
  guildIDGT: String
  guildIDGTE: String
  guildIDLT: String
  guildIDLTE: String
  guildIDContains: String
  guildIDHasPrefix: String
  guildIDHasSuffix: String
  guildIDEqualFold: String
  guildIDContainsFold: String
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """icon_hash field predicates"""
  iconHash: String
  iconHashNEQ: String
  iconHashIn: [String!]
  iconHashNotIn: [String!]
  iconHashGT: String
  iconHashGTE: String
  iconHashLT: String
  iconHashLTE: String
  iconHashContains: String
  iconHashHasPrefix: String
  iconHashHasSuffix: String
  iconHashIsNil: Boolean
  iconHashNotNil: Boolean
  iconHashEqualFold: String
  iconHashContainsFold: String
  """icon_url field predicates"""
  iconURL: String
  iconURLNEQ: String
  iconURLIn: [String!]
  iconURLNotIn: [String!]
  iconURLGT: String
  iconURLGTE: String
  iconURLLT: String
  iconURLLTE: String
  iconURLContains: String
  iconURLHasPrefix: String
  iconURLHasSuffix: String
  iconURLEqualFold: String
  iconURLContainsFold: String
  """joined_at field predicates"""
  joinedAt: Time
  joinedAtNEQ: Time
  joinedAtIn: [Time!]
  joinedAtNotIn: [Time!]
  joinedAtGT: Time
  joinedAtGTE: Time
  joinedAtLT: Time
  joinedAtLTE: Time
  """large field predicates"""
  large: Boolean
  largeNEQ: Boolean
  largeIsNil: Boolean
  largeNotNil: Boolean
  """member_count field predicates"""
  memberCount: Int
  memberCountNEQ: Int
  memberCountIn: [Int!]
  memberCountNotIn: [Int!]
  memberCountGT: Int
  memberCountGTE: Int
  memberCountLT: Int
  memberCountLTE: Int
  memberCountIsNil: Boolean
  memberCountNotNil: Boolean
  """owner_id field predicates"""
  ownerID: String
  ownerIDNEQ: String
  ownerIDIn: [String!]
  ownerIDNotIn: [String!]
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDContains: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDEqualFold: String
  ownerIDContainsFold: String
  """permissions field predicates"""
  permissions: Uint64
  permissionsNEQ: Uint64
  permissionsIn: [Uint64!]
  permissionsNotIn: [Uint64!]
  permissionsGT: Uint64
  permissionsGTE: Uint64
  permissionsLT: Uint64
  permissionsLTE: Uint64
  permissionsIsNil: Boolean
  permissionsNotNil: Boolean
  """region field predicates"""
  region: String
  regionNEQ: String
  regionIn: [String!]
  regionNotIn: [String!]
  regionGT: String
  regionGTE: String
  regionLT: String
  regionLTE: String
  regionContains: String
  regionHasPrefix: String
  regionHasSuffix: String
  regionIsNil: Boolean
  regionNotNil: Boolean
  regionEqualFold: String
  regionContainsFold: String
  """system_channel_flags field predicates"""
  systemChannelFlags: String
  systemChannelFlagsNEQ: String
  systemChannelFlagsIn: [String!]
  systemChannelFlagsNotIn: [String!]
  systemChannelFlagsGT: String
  systemChannelFlagsGTE: String
  systemChannelFlagsLT: String
  systemChannelFlagsLTE: String
  systemChannelFlagsContains: String
  systemChannelFlagsHasPrefix: String
  systemChannelFlagsHasSuffix: String
  systemChannelFlagsIsNil: Boolean
  systemChannelFlagsNotNil: Boolean
  systemChannelFlagsEqualFold: String
  systemChannelFlagsContainsFold: String
  """guild_settings edge predicates"""
  hasGuildSettings: Boolean
  hasGuildSettingsWith: [GuildSettingsWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/lrstanley/ent-relay-conn-bug/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  guilds(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Guilds returned from the connection."""
    orderBy: GuildOrder

    """Filtering options for Guilds returned from the connection."""
    where: GuildWhereInput
  ): GuildConnection!
  guildsettingsslice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for GuildSettingsSlice returned from the connection."""
    where: GuildSettingsWhereInput
  ): GuildSettingsConnection!
}
