// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guild"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guildsettings"
)

// GuildSettings is the model entity for the GuildSettings schema.
type GuildSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// True if the guild should be monitored/acted upon.
	Enabled bool `json:"enabled,omitempty"`
	// Default max cloned channels for the guild.
	DefaultMaxClones int `json:"default_max_clones,omitempty"`
	// Regex match for channel names.
	RegexMatch string `json:"regex_match,omitempty"`
	// Contact email for the guild.
	ContactEmail string `json:"contact_email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuildSettingsQuery when eager-loading is set.
	Edges                GuildSettingsEdges `json:"edges"`
	guild_guild_settings *int
}

// GuildSettingsEdges holds the relations/edges for other nodes in the graph.
type GuildSettingsEdges struct {
	// The guild these settings belong to.
	Guild *Guild `json:"guild,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuildSettingsEdges) GuildOrErr() (*Guild, error) {
	if e.loadedTypes[0] {
		if e.Guild == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: guild.Label}
		}
		return e.Guild, nil
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GuildSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guildsettings.FieldEnabled:
			values[i] = new(sql.NullBool)
		case guildsettings.FieldID, guildsettings.FieldDefaultMaxClones:
			values[i] = new(sql.NullInt64)
		case guildsettings.FieldRegexMatch, guildsettings.FieldContactEmail:
			values[i] = new(sql.NullString)
		case guildsettings.FieldCreateTime, guildsettings.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case guildsettings.ForeignKeys[0]: // guild_guild_settings
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GuildSettings", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GuildSettings fields.
func (gs *GuildSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guildsettings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case guildsettings.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				gs.CreateTime = value.Time
			}
		case guildsettings.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				gs.UpdateTime = value.Time
			}
		case guildsettings.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				gs.Enabled = value.Bool
			}
		case guildsettings.FieldDefaultMaxClones:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_max_clones", values[i])
			} else if value.Valid {
				gs.DefaultMaxClones = int(value.Int64)
			}
		case guildsettings.FieldRegexMatch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field regex_match", values[i])
			} else if value.Valid {
				gs.RegexMatch = value.String
			}
		case guildsettings.FieldContactEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_email", values[i])
			} else if value.Valid {
				gs.ContactEmail = value.String
			}
		case guildsettings.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field guild_guild_settings", value)
			} else if value.Valid {
				gs.guild_guild_settings = new(int)
				*gs.guild_guild_settings = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGuild queries the "guild" edge of the GuildSettings entity.
func (gs *GuildSettings) QueryGuild() *GuildQuery {
	return (&GuildSettingsClient{config: gs.config}).QueryGuild(gs)
}

// Update returns a builder for updating this GuildSettings.
// Note that you need to call GuildSettings.Unwrap() before calling this method if this GuildSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GuildSettings) Update() *GuildSettingsUpdateOne {
	return (&GuildSettingsClient{config: gs.config}).UpdateOne(gs)
}

// Unwrap unwraps the GuildSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GuildSettings) Unwrap() *GuildSettings {
	_tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GuildSettings is not a transactional entity")
	}
	gs.config.driver = _tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GuildSettings) String() string {
	var builder strings.Builder
	builder.WriteString("GuildSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gs.ID))
	builder.WriteString("create_time=")
	builder.WriteString(gs.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(gs.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", gs.Enabled))
	builder.WriteString(", ")
	builder.WriteString("default_max_clones=")
	builder.WriteString(fmt.Sprintf("%v", gs.DefaultMaxClones))
	builder.WriteString(", ")
	builder.WriteString("regex_match=")
	builder.WriteString(gs.RegexMatch)
	builder.WriteString(", ")
	builder.WriteString("contact_email=")
	builder.WriteString(gs.ContactEmail)
	builder.WriteByte(')')
	return builder.String()
}

// GuildSettingsSlice is a parsable slice of GuildSettings.
type GuildSettingsSlice []*GuildSettings

func (gs GuildSettingsSlice) config(cfg config) {
	for _i := range gs {
		gs[_i].config = cfg
	}
}
