// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guild"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guildsettings"
)

// Guild is the model entity for the Guild schema.
type Guild struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Guild id.
	GuildID string `json:"guild_id,omitempty"`
	// Guild name (2-100 chars, excl. trailing/leading spaces).
	Name string `json:"name,omitempty"`
	// Enabled guild features.
	Features []string `json:"features,omitempty"`
	// Icon hash.
	IconHash string `json:"icon_hash,omitempty"`
	// IconURL holds the value of the "icon_url" field.
	IconURL string `json:"icon_url,omitempty"`
	// When the bot joined the guild.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// True if the guild is considered large (according to Discord standards).
	Large bool `json:"large,omitempty"`
	// Total number of members in the guild.
	MemberCount int `json:"member_count,omitempty"`
	// Discord snowflake ID of the user that owns the guild.
	OwnerID string `json:"owner_id,omitempty"`
	// Permissions of the bot on this guild (excludes overrides).
	Permissions uint64 `json:"permissions,omitempty"`
	// Region of the guild.
	Region string `json:"region,omitempty"`
	// System channel flags.
	SystemChannelFlags string `json:"system_channel_flags,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuildQuery when eager-loading is set.
	Edges GuildEdges `json:"edges"`
}

// GuildEdges holds the relations/edges for other nodes in the graph.
type GuildEdges struct {
	// GuildSettings holds the value of the guild_settings edge.
	GuildSettings *GuildSettings `json:"guild_settings,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// GuildSettingsOrErr returns the GuildSettings value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuildEdges) GuildSettingsOrErr() (*GuildSettings, error) {
	if e.loadedTypes[0] {
		if e.GuildSettings == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: guildsettings.Label}
		}
		return e.GuildSettings, nil
	}
	return nil, &NotLoadedError{edge: "guild_settings"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Guild) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guild.FieldFeatures:
			values[i] = new([]byte)
		case guild.FieldLarge:
			values[i] = new(sql.NullBool)
		case guild.FieldID, guild.FieldMemberCount, guild.FieldPermissions:
			values[i] = new(sql.NullInt64)
		case guild.FieldGuildID, guild.FieldName, guild.FieldIconHash, guild.FieldIconURL, guild.FieldOwnerID, guild.FieldRegion, guild.FieldSystemChannelFlags:
			values[i] = new(sql.NullString)
		case guild.FieldCreateTime, guild.FieldUpdateTime, guild.FieldJoinedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Guild", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Guild fields.
func (gu *Guild) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guild.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gu.ID = int(value.Int64)
		case guild.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				gu.CreateTime = value.Time
			}
		case guild.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				gu.UpdateTime = value.Time
			}
		case guild.FieldGuildID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guild_id", values[i])
			} else if value.Valid {
				gu.GuildID = value.String
			}
		case guild.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gu.Name = value.String
			}
		case guild.FieldFeatures:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gu.Features); err != nil {
					return fmt.Errorf("unmarshal field features: %w", err)
				}
			}
		case guild.FieldIconHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_hash", values[i])
			} else if value.Valid {
				gu.IconHash = value.String
			}
		case guild.FieldIconURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field icon_url", values[i])
			} else if value.Valid {
				gu.IconURL = value.String
			}
		case guild.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				gu.JoinedAt = value.Time
			}
		case guild.FieldLarge:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field large", values[i])
			} else if value.Valid {
				gu.Large = value.Bool
			}
		case guild.FieldMemberCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_count", values[i])
			} else if value.Valid {
				gu.MemberCount = int(value.Int64)
			}
		case guild.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				gu.OwnerID = value.String
			}
		case guild.FieldPermissions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field permissions", values[i])
			} else if value.Valid {
				gu.Permissions = uint64(value.Int64)
			}
		case guild.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				gu.Region = value.String
			}
		case guild.FieldSystemChannelFlags:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field system_channel_flags", values[i])
			} else if value.Valid {
				gu.SystemChannelFlags = value.String
			}
		}
	}
	return nil
}

// QueryGuildSettings queries the "guild_settings" edge of the Guild entity.
func (gu *Guild) QueryGuildSettings() *GuildSettingsQuery {
	return (&GuildClient{config: gu.config}).QueryGuildSettings(gu)
}

// Update returns a builder for updating this Guild.
// Note that you need to call Guild.Unwrap() before calling this method if this Guild
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *Guild) Update() *GuildUpdateOne {
	return (&GuildClient{config: gu.config}).UpdateOne(gu)
}

// Unwrap unwraps the Guild entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *Guild) Unwrap() *Guild {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Guild is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *Guild) String() string {
	var builder strings.Builder
	builder.WriteString("Guild(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("create_time=")
	builder.WriteString(gu.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(gu.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("guild_id=")
	builder.WriteString(gu.GuildID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gu.Name)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(fmt.Sprintf("%v", gu.Features))
	builder.WriteString(", ")
	builder.WriteString("icon_hash=")
	builder.WriteString(gu.IconHash)
	builder.WriteString(", ")
	builder.WriteString("icon_url=")
	builder.WriteString(gu.IconURL)
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(gu.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("large=")
	builder.WriteString(fmt.Sprintf("%v", gu.Large))
	builder.WriteString(", ")
	builder.WriteString("member_count=")
	builder.WriteString(fmt.Sprintf("%v", gu.MemberCount))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(gu.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("permissions=")
	builder.WriteString(fmt.Sprintf("%v", gu.Permissions))
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(gu.Region)
	builder.WriteString(", ")
	builder.WriteString("system_channel_flags=")
	builder.WriteString(gu.SystemChannelFlags)
	builder.WriteByte(')')
	return builder.String()
}

// Guilds is a parsable slice of Guild.
type Guilds []*Guild

func (gu Guilds) config(cfg config) {
	for _i := range gu {
		gu[_i].config = cfg
	}
}
