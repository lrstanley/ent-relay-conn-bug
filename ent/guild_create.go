// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guild"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guildsettings"
)

// GuildCreate is the builder for creating a Guild entity.
type GuildCreate struct {
	config
	mutation *GuildMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (gc *GuildCreate) SetCreateTime(t time.Time) *GuildCreate {
	gc.mutation.SetCreateTime(t)
	return gc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (gc *GuildCreate) SetNillableCreateTime(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetCreateTime(*t)
	}
	return gc
}

// SetUpdateTime sets the "update_time" field.
func (gc *GuildCreate) SetUpdateTime(t time.Time) *GuildCreate {
	gc.mutation.SetUpdateTime(t)
	return gc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (gc *GuildCreate) SetNillableUpdateTime(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetUpdateTime(*t)
	}
	return gc
}

// SetGuildID sets the "guild_id" field.
func (gc *GuildCreate) SetGuildID(s string) *GuildCreate {
	gc.mutation.SetGuildID(s)
	return gc
}

// SetName sets the "name" field.
func (gc *GuildCreate) SetName(s string) *GuildCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetFeatures sets the "features" field.
func (gc *GuildCreate) SetFeatures(s []string) *GuildCreate {
	gc.mutation.SetFeatures(s)
	return gc
}

// SetIconHash sets the "icon_hash" field.
func (gc *GuildCreate) SetIconHash(s string) *GuildCreate {
	gc.mutation.SetIconHash(s)
	return gc
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (gc *GuildCreate) SetNillableIconHash(s *string) *GuildCreate {
	if s != nil {
		gc.SetIconHash(*s)
	}
	return gc
}

// SetIconURL sets the "icon_url" field.
func (gc *GuildCreate) SetIconURL(s string) *GuildCreate {
	gc.mutation.SetIconURL(s)
	return gc
}

// SetJoinedAt sets the "joined_at" field.
func (gc *GuildCreate) SetJoinedAt(t time.Time) *GuildCreate {
	gc.mutation.SetJoinedAt(t)
	return gc
}

// SetLarge sets the "large" field.
func (gc *GuildCreate) SetLarge(b bool) *GuildCreate {
	gc.mutation.SetLarge(b)
	return gc
}

// SetNillableLarge sets the "large" field if the given value is not nil.
func (gc *GuildCreate) SetNillableLarge(b *bool) *GuildCreate {
	if b != nil {
		gc.SetLarge(*b)
	}
	return gc
}

// SetMemberCount sets the "member_count" field.
func (gc *GuildCreate) SetMemberCount(i int) *GuildCreate {
	gc.mutation.SetMemberCount(i)
	return gc
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (gc *GuildCreate) SetNillableMemberCount(i *int) *GuildCreate {
	if i != nil {
		gc.SetMemberCount(*i)
	}
	return gc
}

// SetOwnerID sets the "owner_id" field.
func (gc *GuildCreate) SetOwnerID(s string) *GuildCreate {
	gc.mutation.SetOwnerID(s)
	return gc
}

// SetPermissions sets the "permissions" field.
func (gc *GuildCreate) SetPermissions(u uint64) *GuildCreate {
	gc.mutation.SetPermissions(u)
	return gc
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (gc *GuildCreate) SetNillablePermissions(u *uint64) *GuildCreate {
	if u != nil {
		gc.SetPermissions(*u)
	}
	return gc
}

// SetRegion sets the "region" field.
func (gc *GuildCreate) SetRegion(s string) *GuildCreate {
	gc.mutation.SetRegion(s)
	return gc
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (gc *GuildCreate) SetNillableRegion(s *string) *GuildCreate {
	if s != nil {
		gc.SetRegion(*s)
	}
	return gc
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (gc *GuildCreate) SetSystemChannelFlags(s string) *GuildCreate {
	gc.mutation.SetSystemChannelFlags(s)
	return gc
}

// SetNillableSystemChannelFlags sets the "system_channel_flags" field if the given value is not nil.
func (gc *GuildCreate) SetNillableSystemChannelFlags(s *string) *GuildCreate {
	if s != nil {
		gc.SetSystemChannelFlags(*s)
	}
	return gc
}

// SetGuildSettingsID sets the "guild_settings" edge to the GuildSettings entity by ID.
func (gc *GuildCreate) SetGuildSettingsID(id int) *GuildCreate {
	gc.mutation.SetGuildSettingsID(id)
	return gc
}

// SetNillableGuildSettingsID sets the "guild_settings" edge to the GuildSettings entity by ID if the given value is not nil.
func (gc *GuildCreate) SetNillableGuildSettingsID(id *int) *GuildCreate {
	if id != nil {
		gc = gc.SetGuildSettingsID(*id)
	}
	return gc
}

// SetGuildSettings sets the "guild_settings" edge to the GuildSettings entity.
func (gc *GuildCreate) SetGuildSettings(g *GuildSettings) *GuildCreate {
	return gc.SetGuildSettingsID(g.ID)
}

// Mutation returns the GuildMutation object of the builder.
func (gc *GuildCreate) Mutation() *GuildMutation {
	return gc.mutation
}

// Save creates the Guild in the database.
func (gc *GuildCreate) Save(ctx context.Context) (*Guild, error) {
	var (
		err  error
		node *Guild
	)
	gc.defaults()
	if len(gc.hooks) == 0 {
		if err = gc.check(); err != nil {
			return nil, err
		}
		node, err = gc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gc.check(); err != nil {
				return nil, err
			}
			gc.mutation = mutation
			if node, err = gc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gc.hooks) - 1; i >= 0; i-- {
			if gc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Guild)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GuildMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuildCreate) SaveX(ctx context.Context) *Guild {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuildCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuildCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuildCreate) defaults() {
	if _, ok := gc.mutation.CreateTime(); !ok {
		v := guild.DefaultCreateTime()
		gc.mutation.SetCreateTime(v)
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		v := guild.DefaultUpdateTime()
		gc.mutation.SetUpdateTime(v)
	}
	if _, ok := gc.mutation.Features(); !ok {
		v := guild.DefaultFeatures
		gc.mutation.SetFeatures(v)
	}
	if _, ok := gc.mutation.Large(); !ok {
		v := guild.DefaultLarge
		gc.mutation.SetLarge(v)
	}
	if _, ok := gc.mutation.MemberCount(); !ok {
		v := guild.DefaultMemberCount
		gc.mutation.SetMemberCount(v)
	}
	if _, ok := gc.mutation.Permissions(); !ok {
		v := guild.DefaultPermissions
		gc.mutation.SetPermissions(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuildCreate) check() error {
	if _, ok := gc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Guild.create_time"`)}
	}
	if _, ok := gc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Guild.update_time"`)}
	}
	if _, ok := gc.mutation.GuildID(); !ok {
		return &ValidationError{Name: "guild_id", err: errors.New(`ent: missing required field "Guild.guild_id"`)}
	}
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Guild.name"`)}
	}
	if v, ok := gc.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if v, ok := gc.mutation.IconHash(); ok {
		if err := guild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_hash": %w`, err)}
		}
	}
	if _, ok := gc.mutation.IconURL(); !ok {
		return &ValidationError{Name: "icon_url", err: errors.New(`ent: missing required field "Guild.icon_url"`)}
	}
	if v, ok := gc.mutation.IconURL(); ok {
		if err := guild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_url": %w`, err)}
		}
	}
	if _, ok := gc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "Guild.joined_at"`)}
	}
	if _, ok := gc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner_id", err: errors.New(`ent: missing required field "Guild.owner_id"`)}
	}
	if v, ok := gc.mutation.Region(); ok {
		if err := guild.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Guild.region": %w`, err)}
		}
	}
	if v, ok := gc.mutation.SystemChannelFlags(); ok {
		if err := guild.SystemChannelFlagsValidator(v); err != nil {
			return &ValidationError{Name: "system_channel_flags", err: fmt.Errorf(`ent: validator failed for field "Guild.system_channel_flags": %w`, err)}
		}
	}
	return nil
}

func (gc *GuildCreate) sqlSave(ctx context.Context) (*Guild, error) {
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (gc *GuildCreate) createSpec() (*Guild, *sqlgraph.CreateSpec) {
	var (
		_node = &Guild{config: gc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: guild.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guild.FieldID,
			},
		}
	)
	if value, ok := gc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := gc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := gc.mutation.GuildID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldGuildID,
		})
		_node.GuildID = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldName,
		})
		_node.Name = value
	}
	if value, ok := gc.mutation.Features(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldFeatures,
		})
		_node.Features = value
	}
	if value, ok := gc.mutation.IconHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldIconHash,
		})
		_node.IconHash = value
	}
	if value, ok := gc.mutation.IconURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldIconURL,
		})
		_node.IconURL = value
	}
	if value, ok := gc.mutation.JoinedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldJoinedAt,
		})
		_node.JoinedAt = value
	}
	if value, ok := gc.mutation.Large(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: guild.FieldLarge,
		})
		_node.Large = value
	}
	if value, ok := gc.mutation.MemberCount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guild.FieldMemberCount,
		})
		_node.MemberCount = value
	}
	if value, ok := gc.mutation.OwnerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldOwnerID,
		})
		_node.OwnerID = value
	}
	if value, ok := gc.mutation.Permissions(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldPermissions,
		})
		_node.Permissions = value
	}
	if value, ok := gc.mutation.Region(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldRegion,
		})
		_node.Region = value
	}
	if value, ok := gc.mutation.SystemChannelFlags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldSystemChannelFlags,
		})
		_node.SystemChannelFlags = value
	}
	if nodes := gc.mutation.GuildSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildSettingsTable,
			Columns: []string{guild.GuildSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: guildsettings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuildCreateBulk is the builder for creating many Guild entities in bulk.
type GuildCreateBulk struct {
	config
	builders []*GuildCreate
}

// Save creates the Guild entities in the database.
func (gcb *GuildCreateBulk) Save(ctx context.Context) ([]*Guild, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guild, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuildMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuildCreateBulk) SaveX(ctx context.Context) []*Guild {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuildCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuildCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
