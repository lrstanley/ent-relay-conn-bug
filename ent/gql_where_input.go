// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"github.com/lrstanley/ent-relay-conn-bug/ent/guild"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guildsettings"
	"github.com/lrstanley/ent-relay-conn-bug/ent/predicate"
)

// GuildWhereInput represents a where input for filtering Guild queries.
type GuildWhereInput struct {
	Predicates []predicate.Guild  `json:"-"`
	Not        *GuildWhereInput   `json:"not,omitempty"`
	Or         []*GuildWhereInput `json:"or,omitempty"`
	And        []*GuildWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "guild_id" field predicates.
	GuildID             *string  `json:"guildID,omitempty"`
	GuildIDNEQ          *string  `json:"guildIDNEQ,omitempty"`
	GuildIDIn           []string `json:"guildIDIn,omitempty"`
	GuildIDNotIn        []string `json:"guildIDNotIn,omitempty"`
	GuildIDGT           *string  `json:"guildIDGT,omitempty"`
	GuildIDGTE          *string  `json:"guildIDGTE,omitempty"`
	GuildIDLT           *string  `json:"guildIDLT,omitempty"`
	GuildIDLTE          *string  `json:"guildIDLTE,omitempty"`
	GuildIDContains     *string  `json:"guildIDContains,omitempty"`
	GuildIDHasPrefix    *string  `json:"guildIDHasPrefix,omitempty"`
	GuildIDHasSuffix    *string  `json:"guildIDHasSuffix,omitempty"`
	GuildIDEqualFold    *string  `json:"guildIDEqualFold,omitempty"`
	GuildIDContainsFold *string  `json:"guildIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "icon_hash" field predicates.
	IconHash             *string  `json:"iconHash,omitempty"`
	IconHashNEQ          *string  `json:"iconHashNEQ,omitempty"`
	IconHashIn           []string `json:"iconHashIn,omitempty"`
	IconHashNotIn        []string `json:"iconHashNotIn,omitempty"`
	IconHashGT           *string  `json:"iconHashGT,omitempty"`
	IconHashGTE          *string  `json:"iconHashGTE,omitempty"`
	IconHashLT           *string  `json:"iconHashLT,omitempty"`
	IconHashLTE          *string  `json:"iconHashLTE,omitempty"`
	IconHashContains     *string  `json:"iconHashContains,omitempty"`
	IconHashHasPrefix    *string  `json:"iconHashHasPrefix,omitempty"`
	IconHashHasSuffix    *string  `json:"iconHashHasSuffix,omitempty"`
	IconHashIsNil        bool     `json:"iconHashIsNil,omitempty"`
	IconHashNotNil       bool     `json:"iconHashNotNil,omitempty"`
	IconHashEqualFold    *string  `json:"iconHashEqualFold,omitempty"`
	IconHashContainsFold *string  `json:"iconHashContainsFold,omitempty"`

	// "icon_url" field predicates.
	IconURL             *string  `json:"iconURL,omitempty"`
	IconURLNEQ          *string  `json:"iconURLNEQ,omitempty"`
	IconURLIn           []string `json:"iconURLIn,omitempty"`
	IconURLNotIn        []string `json:"iconURLNotIn,omitempty"`
	IconURLGT           *string  `json:"iconURLGT,omitempty"`
	IconURLGTE          *string  `json:"iconURLGTE,omitempty"`
	IconURLLT           *string  `json:"iconURLLT,omitempty"`
	IconURLLTE          *string  `json:"iconURLLTE,omitempty"`
	IconURLContains     *string  `json:"iconURLContains,omitempty"`
	IconURLHasPrefix    *string  `json:"iconURLHasPrefix,omitempty"`
	IconURLHasSuffix    *string  `json:"iconURLHasSuffix,omitempty"`
	IconURLEqualFold    *string  `json:"iconURLEqualFold,omitempty"`
	IconURLContainsFold *string  `json:"iconURLContainsFold,omitempty"`

	// "joined_at" field predicates.
	JoinedAt      *time.Time  `json:"joinedAt,omitempty"`
	JoinedAtNEQ   *time.Time  `json:"joinedAtNEQ,omitempty"`
	JoinedAtIn    []time.Time `json:"joinedAtIn,omitempty"`
	JoinedAtNotIn []time.Time `json:"joinedAtNotIn,omitempty"`
	JoinedAtGT    *time.Time  `json:"joinedAtGT,omitempty"`
	JoinedAtGTE   *time.Time  `json:"joinedAtGTE,omitempty"`
	JoinedAtLT    *time.Time  `json:"joinedAtLT,omitempty"`
	JoinedAtLTE   *time.Time  `json:"joinedAtLTE,omitempty"`

	// "large" field predicates.
	Large       *bool `json:"large,omitempty"`
	LargeNEQ    *bool `json:"largeNEQ,omitempty"`
	LargeIsNil  bool  `json:"largeIsNil,omitempty"`
	LargeNotNil bool  `json:"largeNotNil,omitempty"`

	// "member_count" field predicates.
	MemberCount       *int  `json:"memberCount,omitempty"`
	MemberCountNEQ    *int  `json:"memberCountNEQ,omitempty"`
	MemberCountIn     []int `json:"memberCountIn,omitempty"`
	MemberCountNotIn  []int `json:"memberCountNotIn,omitempty"`
	MemberCountGT     *int  `json:"memberCountGT,omitempty"`
	MemberCountGTE    *int  `json:"memberCountGTE,omitempty"`
	MemberCountLT     *int  `json:"memberCountLT,omitempty"`
	MemberCountLTE    *int  `json:"memberCountLTE,omitempty"`
	MemberCountIsNil  bool  `json:"memberCountIsNil,omitempty"`
	MemberCountNotNil bool  `json:"memberCountNotNil,omitempty"`

	// "owner_id" field predicates.
	OwnerID             *string  `json:"ownerID,omitempty"`
	OwnerIDNEQ          *string  `json:"ownerIDNEQ,omitempty"`
	OwnerIDIn           []string `json:"ownerIDIn,omitempty"`
	OwnerIDNotIn        []string `json:"ownerIDNotIn,omitempty"`
	OwnerIDGT           *string  `json:"ownerIDGT,omitempty"`
	OwnerIDGTE          *string  `json:"ownerIDGTE,omitempty"`
	OwnerIDLT           *string  `json:"ownerIDLT,omitempty"`
	OwnerIDLTE          *string  `json:"ownerIDLTE,omitempty"`
	OwnerIDContains     *string  `json:"ownerIDContains,omitempty"`
	OwnerIDHasPrefix    *string  `json:"ownerIDHasPrefix,omitempty"`
	OwnerIDHasSuffix    *string  `json:"ownerIDHasSuffix,omitempty"`
	OwnerIDEqualFold    *string  `json:"ownerIDEqualFold,omitempty"`
	OwnerIDContainsFold *string  `json:"ownerIDContainsFold,omitempty"`

	// "permissions" field predicates.
	Permissions       *uint64  `json:"permissions,omitempty"`
	PermissionsNEQ    *uint64  `json:"permissionsNEQ,omitempty"`
	PermissionsIn     []uint64 `json:"permissionsIn,omitempty"`
	PermissionsNotIn  []uint64 `json:"permissionsNotIn,omitempty"`
	PermissionsGT     *uint64  `json:"permissionsGT,omitempty"`
	PermissionsGTE    *uint64  `json:"permissionsGTE,omitempty"`
	PermissionsLT     *uint64  `json:"permissionsLT,omitempty"`
	PermissionsLTE    *uint64  `json:"permissionsLTE,omitempty"`
	PermissionsIsNil  bool     `json:"permissionsIsNil,omitempty"`
	PermissionsNotNil bool     `json:"permissionsNotNil,omitempty"`

	// "region" field predicates.
	Region             *string  `json:"region,omitempty"`
	RegionNEQ          *string  `json:"regionNEQ,omitempty"`
	RegionIn           []string `json:"regionIn,omitempty"`
	RegionNotIn        []string `json:"regionNotIn,omitempty"`
	RegionGT           *string  `json:"regionGT,omitempty"`
	RegionGTE          *string  `json:"regionGTE,omitempty"`
	RegionLT           *string  `json:"regionLT,omitempty"`
	RegionLTE          *string  `json:"regionLTE,omitempty"`
	RegionContains     *string  `json:"regionContains,omitempty"`
	RegionHasPrefix    *string  `json:"regionHasPrefix,omitempty"`
	RegionHasSuffix    *string  `json:"regionHasSuffix,omitempty"`
	RegionIsNil        bool     `json:"regionIsNil,omitempty"`
	RegionNotNil       bool     `json:"regionNotNil,omitempty"`
	RegionEqualFold    *string  `json:"regionEqualFold,omitempty"`
	RegionContainsFold *string  `json:"regionContainsFold,omitempty"`

	// "system_channel_flags" field predicates.
	SystemChannelFlags             *string  `json:"systemChannelFlags,omitempty"`
	SystemChannelFlagsNEQ          *string  `json:"systemChannelFlagsNEQ,omitempty"`
	SystemChannelFlagsIn           []string `json:"systemChannelFlagsIn,omitempty"`
	SystemChannelFlagsNotIn        []string `json:"systemChannelFlagsNotIn,omitempty"`
	SystemChannelFlagsGT           *string  `json:"systemChannelFlagsGT,omitempty"`
	SystemChannelFlagsGTE          *string  `json:"systemChannelFlagsGTE,omitempty"`
	SystemChannelFlagsLT           *string  `json:"systemChannelFlagsLT,omitempty"`
	SystemChannelFlagsLTE          *string  `json:"systemChannelFlagsLTE,omitempty"`
	SystemChannelFlagsContains     *string  `json:"systemChannelFlagsContains,omitempty"`
	SystemChannelFlagsHasPrefix    *string  `json:"systemChannelFlagsHasPrefix,omitempty"`
	SystemChannelFlagsHasSuffix    *string  `json:"systemChannelFlagsHasSuffix,omitempty"`
	SystemChannelFlagsIsNil        bool     `json:"systemChannelFlagsIsNil,omitempty"`
	SystemChannelFlagsNotNil       bool     `json:"systemChannelFlagsNotNil,omitempty"`
	SystemChannelFlagsEqualFold    *string  `json:"systemChannelFlagsEqualFold,omitempty"`
	SystemChannelFlagsContainsFold *string  `json:"systemChannelFlagsContainsFold,omitempty"`

	// "guild_settings" edge predicates.
	HasGuildSettings     *bool                      `json:"hasGuildSettings,omitempty"`
	HasGuildSettingsWith []*GuildSettingsWhereInput `json:"hasGuildSettingsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GuildWhereInput) AddPredicates(predicates ...predicate.Guild) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GuildWhereInput filter on the GuildQuery builder.
func (i *GuildWhereInput) Filter(q *GuildQuery) (*GuildQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGuildWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGuildWhereInput is returned in case the GuildWhereInput is empty.
var ErrEmptyGuildWhereInput = errors.New("ent: empty predicate GuildWhereInput")

// P returns a predicate for filtering guilds.
// An error is returned if the input is empty or invalid.
func (i *GuildWhereInput) P() (predicate.Guild, error) {
	var predicates []predicate.Guild
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, guild.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Guild, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, guild.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Guild, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, guild.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, guild.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, guild.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, guild.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, guild.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, guild.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, guild.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, guild.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, guild.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, guild.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, guild.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, guild.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, guild.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, guild.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, guild.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, guild.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, guild.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, guild.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, guild.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, guild.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, guild.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, guild.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, guild.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, guild.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, guild.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.GuildID != nil {
		predicates = append(predicates, guild.GuildIDEQ(*i.GuildID))
	}
	if i.GuildIDNEQ != nil {
		predicates = append(predicates, guild.GuildIDNEQ(*i.GuildIDNEQ))
	}
	if len(i.GuildIDIn) > 0 {
		predicates = append(predicates, guild.GuildIDIn(i.GuildIDIn...))
	}
	if len(i.GuildIDNotIn) > 0 {
		predicates = append(predicates, guild.GuildIDNotIn(i.GuildIDNotIn...))
	}
	if i.GuildIDGT != nil {
		predicates = append(predicates, guild.GuildIDGT(*i.GuildIDGT))
	}
	if i.GuildIDGTE != nil {
		predicates = append(predicates, guild.GuildIDGTE(*i.GuildIDGTE))
	}
	if i.GuildIDLT != nil {
		predicates = append(predicates, guild.GuildIDLT(*i.GuildIDLT))
	}
	if i.GuildIDLTE != nil {
		predicates = append(predicates, guild.GuildIDLTE(*i.GuildIDLTE))
	}
	if i.GuildIDContains != nil {
		predicates = append(predicates, guild.GuildIDContains(*i.GuildIDContains))
	}
	if i.GuildIDHasPrefix != nil {
		predicates = append(predicates, guild.GuildIDHasPrefix(*i.GuildIDHasPrefix))
	}
	if i.GuildIDHasSuffix != nil {
		predicates = append(predicates, guild.GuildIDHasSuffix(*i.GuildIDHasSuffix))
	}
	if i.GuildIDEqualFold != nil {
		predicates = append(predicates, guild.GuildIDEqualFold(*i.GuildIDEqualFold))
	}
	if i.GuildIDContainsFold != nil {
		predicates = append(predicates, guild.GuildIDContainsFold(*i.GuildIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, guild.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, guild.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, guild.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, guild.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, guild.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, guild.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, guild.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, guild.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, guild.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, guild.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, guild.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, guild.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, guild.NameContainsFold(*i.NameContainsFold))
	}
	if i.IconHash != nil {
		predicates = append(predicates, guild.IconHashEQ(*i.IconHash))
	}
	if i.IconHashNEQ != nil {
		predicates = append(predicates, guild.IconHashNEQ(*i.IconHashNEQ))
	}
	if len(i.IconHashIn) > 0 {
		predicates = append(predicates, guild.IconHashIn(i.IconHashIn...))
	}
	if len(i.IconHashNotIn) > 0 {
		predicates = append(predicates, guild.IconHashNotIn(i.IconHashNotIn...))
	}
	if i.IconHashGT != nil {
		predicates = append(predicates, guild.IconHashGT(*i.IconHashGT))
	}
	if i.IconHashGTE != nil {
		predicates = append(predicates, guild.IconHashGTE(*i.IconHashGTE))
	}
	if i.IconHashLT != nil {
		predicates = append(predicates, guild.IconHashLT(*i.IconHashLT))
	}
	if i.IconHashLTE != nil {
		predicates = append(predicates, guild.IconHashLTE(*i.IconHashLTE))
	}
	if i.IconHashContains != nil {
		predicates = append(predicates, guild.IconHashContains(*i.IconHashContains))
	}
	if i.IconHashHasPrefix != nil {
		predicates = append(predicates, guild.IconHashHasPrefix(*i.IconHashHasPrefix))
	}
	if i.IconHashHasSuffix != nil {
		predicates = append(predicates, guild.IconHashHasSuffix(*i.IconHashHasSuffix))
	}
	if i.IconHashIsNil {
		predicates = append(predicates, guild.IconHashIsNil())
	}
	if i.IconHashNotNil {
		predicates = append(predicates, guild.IconHashNotNil())
	}
	if i.IconHashEqualFold != nil {
		predicates = append(predicates, guild.IconHashEqualFold(*i.IconHashEqualFold))
	}
	if i.IconHashContainsFold != nil {
		predicates = append(predicates, guild.IconHashContainsFold(*i.IconHashContainsFold))
	}
	if i.IconURL != nil {
		predicates = append(predicates, guild.IconURLEQ(*i.IconURL))
	}
	if i.IconURLNEQ != nil {
		predicates = append(predicates, guild.IconURLNEQ(*i.IconURLNEQ))
	}
	if len(i.IconURLIn) > 0 {
		predicates = append(predicates, guild.IconURLIn(i.IconURLIn...))
	}
	if len(i.IconURLNotIn) > 0 {
		predicates = append(predicates, guild.IconURLNotIn(i.IconURLNotIn...))
	}
	if i.IconURLGT != nil {
		predicates = append(predicates, guild.IconURLGT(*i.IconURLGT))
	}
	if i.IconURLGTE != nil {
		predicates = append(predicates, guild.IconURLGTE(*i.IconURLGTE))
	}
	if i.IconURLLT != nil {
		predicates = append(predicates, guild.IconURLLT(*i.IconURLLT))
	}
	if i.IconURLLTE != nil {
		predicates = append(predicates, guild.IconURLLTE(*i.IconURLLTE))
	}
	if i.IconURLContains != nil {
		predicates = append(predicates, guild.IconURLContains(*i.IconURLContains))
	}
	if i.IconURLHasPrefix != nil {
		predicates = append(predicates, guild.IconURLHasPrefix(*i.IconURLHasPrefix))
	}
	if i.IconURLHasSuffix != nil {
		predicates = append(predicates, guild.IconURLHasSuffix(*i.IconURLHasSuffix))
	}
	if i.IconURLEqualFold != nil {
		predicates = append(predicates, guild.IconURLEqualFold(*i.IconURLEqualFold))
	}
	if i.IconURLContainsFold != nil {
		predicates = append(predicates, guild.IconURLContainsFold(*i.IconURLContainsFold))
	}
	if i.JoinedAt != nil {
		predicates = append(predicates, guild.JoinedAtEQ(*i.JoinedAt))
	}
	if i.JoinedAtNEQ != nil {
		predicates = append(predicates, guild.JoinedAtNEQ(*i.JoinedAtNEQ))
	}
	if len(i.JoinedAtIn) > 0 {
		predicates = append(predicates, guild.JoinedAtIn(i.JoinedAtIn...))
	}
	if len(i.JoinedAtNotIn) > 0 {
		predicates = append(predicates, guild.JoinedAtNotIn(i.JoinedAtNotIn...))
	}
	if i.JoinedAtGT != nil {
		predicates = append(predicates, guild.JoinedAtGT(*i.JoinedAtGT))
	}
	if i.JoinedAtGTE != nil {
		predicates = append(predicates, guild.JoinedAtGTE(*i.JoinedAtGTE))
	}
	if i.JoinedAtLT != nil {
		predicates = append(predicates, guild.JoinedAtLT(*i.JoinedAtLT))
	}
	if i.JoinedAtLTE != nil {
		predicates = append(predicates, guild.JoinedAtLTE(*i.JoinedAtLTE))
	}
	if i.Large != nil {
		predicates = append(predicates, guild.LargeEQ(*i.Large))
	}
	if i.LargeNEQ != nil {
		predicates = append(predicates, guild.LargeNEQ(*i.LargeNEQ))
	}
	if i.LargeIsNil {
		predicates = append(predicates, guild.LargeIsNil())
	}
	if i.LargeNotNil {
		predicates = append(predicates, guild.LargeNotNil())
	}
	if i.MemberCount != nil {
		predicates = append(predicates, guild.MemberCountEQ(*i.MemberCount))
	}
	if i.MemberCountNEQ != nil {
		predicates = append(predicates, guild.MemberCountNEQ(*i.MemberCountNEQ))
	}
	if len(i.MemberCountIn) > 0 {
		predicates = append(predicates, guild.MemberCountIn(i.MemberCountIn...))
	}
	if len(i.MemberCountNotIn) > 0 {
		predicates = append(predicates, guild.MemberCountNotIn(i.MemberCountNotIn...))
	}
	if i.MemberCountGT != nil {
		predicates = append(predicates, guild.MemberCountGT(*i.MemberCountGT))
	}
	if i.MemberCountGTE != nil {
		predicates = append(predicates, guild.MemberCountGTE(*i.MemberCountGTE))
	}
	if i.MemberCountLT != nil {
		predicates = append(predicates, guild.MemberCountLT(*i.MemberCountLT))
	}
	if i.MemberCountLTE != nil {
		predicates = append(predicates, guild.MemberCountLTE(*i.MemberCountLTE))
	}
	if i.MemberCountIsNil {
		predicates = append(predicates, guild.MemberCountIsNil())
	}
	if i.MemberCountNotNil {
		predicates = append(predicates, guild.MemberCountNotNil())
	}
	if i.OwnerID != nil {
		predicates = append(predicates, guild.OwnerIDEQ(*i.OwnerID))
	}
	if i.OwnerIDNEQ != nil {
		predicates = append(predicates, guild.OwnerIDNEQ(*i.OwnerIDNEQ))
	}
	if len(i.OwnerIDIn) > 0 {
		predicates = append(predicates, guild.OwnerIDIn(i.OwnerIDIn...))
	}
	if len(i.OwnerIDNotIn) > 0 {
		predicates = append(predicates, guild.OwnerIDNotIn(i.OwnerIDNotIn...))
	}
	if i.OwnerIDGT != nil {
		predicates = append(predicates, guild.OwnerIDGT(*i.OwnerIDGT))
	}
	if i.OwnerIDGTE != nil {
		predicates = append(predicates, guild.OwnerIDGTE(*i.OwnerIDGTE))
	}
	if i.OwnerIDLT != nil {
		predicates = append(predicates, guild.OwnerIDLT(*i.OwnerIDLT))
	}
	if i.OwnerIDLTE != nil {
		predicates = append(predicates, guild.OwnerIDLTE(*i.OwnerIDLTE))
	}
	if i.OwnerIDContains != nil {
		predicates = append(predicates, guild.OwnerIDContains(*i.OwnerIDContains))
	}
	if i.OwnerIDHasPrefix != nil {
		predicates = append(predicates, guild.OwnerIDHasPrefix(*i.OwnerIDHasPrefix))
	}
	if i.OwnerIDHasSuffix != nil {
		predicates = append(predicates, guild.OwnerIDHasSuffix(*i.OwnerIDHasSuffix))
	}
	if i.OwnerIDEqualFold != nil {
		predicates = append(predicates, guild.OwnerIDEqualFold(*i.OwnerIDEqualFold))
	}
	if i.OwnerIDContainsFold != nil {
		predicates = append(predicates, guild.OwnerIDContainsFold(*i.OwnerIDContainsFold))
	}
	if i.Permissions != nil {
		predicates = append(predicates, guild.PermissionsEQ(*i.Permissions))
	}
	if i.PermissionsNEQ != nil {
		predicates = append(predicates, guild.PermissionsNEQ(*i.PermissionsNEQ))
	}
	if len(i.PermissionsIn) > 0 {
		predicates = append(predicates, guild.PermissionsIn(i.PermissionsIn...))
	}
	if len(i.PermissionsNotIn) > 0 {
		predicates = append(predicates, guild.PermissionsNotIn(i.PermissionsNotIn...))
	}
	if i.PermissionsGT != nil {
		predicates = append(predicates, guild.PermissionsGT(*i.PermissionsGT))
	}
	if i.PermissionsGTE != nil {
		predicates = append(predicates, guild.PermissionsGTE(*i.PermissionsGTE))
	}
	if i.PermissionsLT != nil {
		predicates = append(predicates, guild.PermissionsLT(*i.PermissionsLT))
	}
	if i.PermissionsLTE != nil {
		predicates = append(predicates, guild.PermissionsLTE(*i.PermissionsLTE))
	}
	if i.PermissionsIsNil {
		predicates = append(predicates, guild.PermissionsIsNil())
	}
	if i.PermissionsNotNil {
		predicates = append(predicates, guild.PermissionsNotNil())
	}
	if i.Region != nil {
		predicates = append(predicates, guild.RegionEQ(*i.Region))
	}
	if i.RegionNEQ != nil {
		predicates = append(predicates, guild.RegionNEQ(*i.RegionNEQ))
	}
	if len(i.RegionIn) > 0 {
		predicates = append(predicates, guild.RegionIn(i.RegionIn...))
	}
	if len(i.RegionNotIn) > 0 {
		predicates = append(predicates, guild.RegionNotIn(i.RegionNotIn...))
	}
	if i.RegionGT != nil {
		predicates = append(predicates, guild.RegionGT(*i.RegionGT))
	}
	if i.RegionGTE != nil {
		predicates = append(predicates, guild.RegionGTE(*i.RegionGTE))
	}
	if i.RegionLT != nil {
		predicates = append(predicates, guild.RegionLT(*i.RegionLT))
	}
	if i.RegionLTE != nil {
		predicates = append(predicates, guild.RegionLTE(*i.RegionLTE))
	}
	if i.RegionContains != nil {
		predicates = append(predicates, guild.RegionContains(*i.RegionContains))
	}
	if i.RegionHasPrefix != nil {
		predicates = append(predicates, guild.RegionHasPrefix(*i.RegionHasPrefix))
	}
	if i.RegionHasSuffix != nil {
		predicates = append(predicates, guild.RegionHasSuffix(*i.RegionHasSuffix))
	}
	if i.RegionIsNil {
		predicates = append(predicates, guild.RegionIsNil())
	}
	if i.RegionNotNil {
		predicates = append(predicates, guild.RegionNotNil())
	}
	if i.RegionEqualFold != nil {
		predicates = append(predicates, guild.RegionEqualFold(*i.RegionEqualFold))
	}
	if i.RegionContainsFold != nil {
		predicates = append(predicates, guild.RegionContainsFold(*i.RegionContainsFold))
	}
	if i.SystemChannelFlags != nil {
		predicates = append(predicates, guild.SystemChannelFlagsEQ(*i.SystemChannelFlags))
	}
	if i.SystemChannelFlagsNEQ != nil {
		predicates = append(predicates, guild.SystemChannelFlagsNEQ(*i.SystemChannelFlagsNEQ))
	}
	if len(i.SystemChannelFlagsIn) > 0 {
		predicates = append(predicates, guild.SystemChannelFlagsIn(i.SystemChannelFlagsIn...))
	}
	if len(i.SystemChannelFlagsNotIn) > 0 {
		predicates = append(predicates, guild.SystemChannelFlagsNotIn(i.SystemChannelFlagsNotIn...))
	}
	if i.SystemChannelFlagsGT != nil {
		predicates = append(predicates, guild.SystemChannelFlagsGT(*i.SystemChannelFlagsGT))
	}
	if i.SystemChannelFlagsGTE != nil {
		predicates = append(predicates, guild.SystemChannelFlagsGTE(*i.SystemChannelFlagsGTE))
	}
	if i.SystemChannelFlagsLT != nil {
		predicates = append(predicates, guild.SystemChannelFlagsLT(*i.SystemChannelFlagsLT))
	}
	if i.SystemChannelFlagsLTE != nil {
		predicates = append(predicates, guild.SystemChannelFlagsLTE(*i.SystemChannelFlagsLTE))
	}
	if i.SystemChannelFlagsContains != nil {
		predicates = append(predicates, guild.SystemChannelFlagsContains(*i.SystemChannelFlagsContains))
	}
	if i.SystemChannelFlagsHasPrefix != nil {
		predicates = append(predicates, guild.SystemChannelFlagsHasPrefix(*i.SystemChannelFlagsHasPrefix))
	}
	if i.SystemChannelFlagsHasSuffix != nil {
		predicates = append(predicates, guild.SystemChannelFlagsHasSuffix(*i.SystemChannelFlagsHasSuffix))
	}
	if i.SystemChannelFlagsIsNil {
		predicates = append(predicates, guild.SystemChannelFlagsIsNil())
	}
	if i.SystemChannelFlagsNotNil {
		predicates = append(predicates, guild.SystemChannelFlagsNotNil())
	}
	if i.SystemChannelFlagsEqualFold != nil {
		predicates = append(predicates, guild.SystemChannelFlagsEqualFold(*i.SystemChannelFlagsEqualFold))
	}
	if i.SystemChannelFlagsContainsFold != nil {
		predicates = append(predicates, guild.SystemChannelFlagsContainsFold(*i.SystemChannelFlagsContainsFold))
	}

	if i.HasGuildSettings != nil {
		p := guild.HasGuildSettings()
		if !*i.HasGuildSettings {
			p = guild.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildSettingsWith) > 0 {
		with := make([]predicate.GuildSettings, 0, len(i.HasGuildSettingsWith))
		for _, w := range i.HasGuildSettingsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildSettingsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guild.HasGuildSettingsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGuildWhereInput
	case 1:
		return predicates[0], nil
	default:
		return guild.And(predicates...), nil
	}
}

// GuildSettingsWhereInput represents a where input for filtering GuildSettings queries.
type GuildSettingsWhereInput struct {
	Predicates []predicate.GuildSettings  `json:"-"`
	Not        *GuildSettingsWhereInput   `json:"not,omitempty"`
	Or         []*GuildSettingsWhereInput `json:"or,omitempty"`
	And        []*GuildSettingsWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "create_time" field predicates.
	CreateTime      *time.Time  `json:"createTime,omitempty"`
	CreateTimeNEQ   *time.Time  `json:"createTimeNEQ,omitempty"`
	CreateTimeIn    []time.Time `json:"createTimeIn,omitempty"`
	CreateTimeNotIn []time.Time `json:"createTimeNotIn,omitempty"`
	CreateTimeGT    *time.Time  `json:"createTimeGT,omitempty"`
	CreateTimeGTE   *time.Time  `json:"createTimeGTE,omitempty"`
	CreateTimeLT    *time.Time  `json:"createTimeLT,omitempty"`
	CreateTimeLTE   *time.Time  `json:"createTimeLTE,omitempty"`

	// "update_time" field predicates.
	UpdateTime      *time.Time  `json:"updateTime,omitempty"`
	UpdateTimeNEQ   *time.Time  `json:"updateTimeNEQ,omitempty"`
	UpdateTimeIn    []time.Time `json:"updateTimeIn,omitempty"`
	UpdateTimeNotIn []time.Time `json:"updateTimeNotIn,omitempty"`
	UpdateTimeGT    *time.Time  `json:"updateTimeGT,omitempty"`
	UpdateTimeGTE   *time.Time  `json:"updateTimeGTE,omitempty"`
	UpdateTimeLT    *time.Time  `json:"updateTimeLT,omitempty"`
	UpdateTimeLTE   *time.Time  `json:"updateTimeLTE,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "default_max_clones" field predicates.
	DefaultMaxClones       *int  `json:"defaultMaxClones,omitempty"`
	DefaultMaxClonesNEQ    *int  `json:"defaultMaxClonesNEQ,omitempty"`
	DefaultMaxClonesIn     []int `json:"defaultMaxClonesIn,omitempty"`
	DefaultMaxClonesNotIn  []int `json:"defaultMaxClonesNotIn,omitempty"`
	DefaultMaxClonesGT     *int  `json:"defaultMaxClonesGT,omitempty"`
	DefaultMaxClonesGTE    *int  `json:"defaultMaxClonesGTE,omitempty"`
	DefaultMaxClonesLT     *int  `json:"defaultMaxClonesLT,omitempty"`
	DefaultMaxClonesLTE    *int  `json:"defaultMaxClonesLTE,omitempty"`
	DefaultMaxClonesIsNil  bool  `json:"defaultMaxClonesIsNil,omitempty"`
	DefaultMaxClonesNotNil bool  `json:"defaultMaxClonesNotNil,omitempty"`

	// "regex_match" field predicates.
	RegexMatch             *string  `json:"regexMatch,omitempty"`
	RegexMatchNEQ          *string  `json:"regexMatchNEQ,omitempty"`
	RegexMatchIn           []string `json:"regexMatchIn,omitempty"`
	RegexMatchNotIn        []string `json:"regexMatchNotIn,omitempty"`
	RegexMatchGT           *string  `json:"regexMatchGT,omitempty"`
	RegexMatchGTE          *string  `json:"regexMatchGTE,omitempty"`
	RegexMatchLT           *string  `json:"regexMatchLT,omitempty"`
	RegexMatchLTE          *string  `json:"regexMatchLTE,omitempty"`
	RegexMatchContains     *string  `json:"regexMatchContains,omitempty"`
	RegexMatchHasPrefix    *string  `json:"regexMatchHasPrefix,omitempty"`
	RegexMatchHasSuffix    *string  `json:"regexMatchHasSuffix,omitempty"`
	RegexMatchIsNil        bool     `json:"regexMatchIsNil,omitempty"`
	RegexMatchNotNil       bool     `json:"regexMatchNotNil,omitempty"`
	RegexMatchEqualFold    *string  `json:"regexMatchEqualFold,omitempty"`
	RegexMatchContainsFold *string  `json:"regexMatchContainsFold,omitempty"`

	// "contact_email" field predicates.
	ContactEmail             *string  `json:"contactEmail,omitempty"`
	ContactEmailNEQ          *string  `json:"contactEmailNEQ,omitempty"`
	ContactEmailIn           []string `json:"contactEmailIn,omitempty"`
	ContactEmailNotIn        []string `json:"contactEmailNotIn,omitempty"`
	ContactEmailGT           *string  `json:"contactEmailGT,omitempty"`
	ContactEmailGTE          *string  `json:"contactEmailGTE,omitempty"`
	ContactEmailLT           *string  `json:"contactEmailLT,omitempty"`
	ContactEmailLTE          *string  `json:"contactEmailLTE,omitempty"`
	ContactEmailContains     *string  `json:"contactEmailContains,omitempty"`
	ContactEmailHasPrefix    *string  `json:"contactEmailHasPrefix,omitempty"`
	ContactEmailHasSuffix    *string  `json:"contactEmailHasSuffix,omitempty"`
	ContactEmailIsNil        bool     `json:"contactEmailIsNil,omitempty"`
	ContactEmailNotNil       bool     `json:"contactEmailNotNil,omitempty"`
	ContactEmailEqualFold    *string  `json:"contactEmailEqualFold,omitempty"`
	ContactEmailContainsFold *string  `json:"contactEmailContainsFold,omitempty"`

	// "guild" edge predicates.
	HasGuild     *bool              `json:"hasGuild,omitempty"`
	HasGuildWith []*GuildWhereInput `json:"hasGuildWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GuildSettingsWhereInput) AddPredicates(predicates ...predicate.GuildSettings) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GuildSettingsWhereInput filter on the GuildSettingsQuery builder.
func (i *GuildSettingsWhereInput) Filter(q *GuildSettingsQuery) (*GuildSettingsQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGuildSettingsWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGuildSettingsWhereInput is returned in case the GuildSettingsWhereInput is empty.
var ErrEmptyGuildSettingsWhereInput = errors.New("ent: empty predicate GuildSettingsWhereInput")

// P returns a predicate for filtering guildsettingsslice.
// An error is returned if the input is empty or invalid.
func (i *GuildSettingsWhereInput) P() (predicate.GuildSettings, error) {
	var predicates []predicate.GuildSettings
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, guildsettings.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.GuildSettings, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, guildsettings.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.GuildSettings, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, guildsettings.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, guildsettings.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, guildsettings.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, guildsettings.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, guildsettings.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, guildsettings.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, guildsettings.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, guildsettings.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, guildsettings.IDLTE(*i.IDLTE))
	}
	if i.CreateTime != nil {
		predicates = append(predicates, guildsettings.CreateTimeEQ(*i.CreateTime))
	}
	if i.CreateTimeNEQ != nil {
		predicates = append(predicates, guildsettings.CreateTimeNEQ(*i.CreateTimeNEQ))
	}
	if len(i.CreateTimeIn) > 0 {
		predicates = append(predicates, guildsettings.CreateTimeIn(i.CreateTimeIn...))
	}
	if len(i.CreateTimeNotIn) > 0 {
		predicates = append(predicates, guildsettings.CreateTimeNotIn(i.CreateTimeNotIn...))
	}
	if i.CreateTimeGT != nil {
		predicates = append(predicates, guildsettings.CreateTimeGT(*i.CreateTimeGT))
	}
	if i.CreateTimeGTE != nil {
		predicates = append(predicates, guildsettings.CreateTimeGTE(*i.CreateTimeGTE))
	}
	if i.CreateTimeLT != nil {
		predicates = append(predicates, guildsettings.CreateTimeLT(*i.CreateTimeLT))
	}
	if i.CreateTimeLTE != nil {
		predicates = append(predicates, guildsettings.CreateTimeLTE(*i.CreateTimeLTE))
	}
	if i.UpdateTime != nil {
		predicates = append(predicates, guildsettings.UpdateTimeEQ(*i.UpdateTime))
	}
	if i.UpdateTimeNEQ != nil {
		predicates = append(predicates, guildsettings.UpdateTimeNEQ(*i.UpdateTimeNEQ))
	}
	if len(i.UpdateTimeIn) > 0 {
		predicates = append(predicates, guildsettings.UpdateTimeIn(i.UpdateTimeIn...))
	}
	if len(i.UpdateTimeNotIn) > 0 {
		predicates = append(predicates, guildsettings.UpdateTimeNotIn(i.UpdateTimeNotIn...))
	}
	if i.UpdateTimeGT != nil {
		predicates = append(predicates, guildsettings.UpdateTimeGT(*i.UpdateTimeGT))
	}
	if i.UpdateTimeGTE != nil {
		predicates = append(predicates, guildsettings.UpdateTimeGTE(*i.UpdateTimeGTE))
	}
	if i.UpdateTimeLT != nil {
		predicates = append(predicates, guildsettings.UpdateTimeLT(*i.UpdateTimeLT))
	}
	if i.UpdateTimeLTE != nil {
		predicates = append(predicates, guildsettings.UpdateTimeLTE(*i.UpdateTimeLTE))
	}
	if i.Enabled != nil {
		predicates = append(predicates, guildsettings.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, guildsettings.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.DefaultMaxClones != nil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesEQ(*i.DefaultMaxClones))
	}
	if i.DefaultMaxClonesNEQ != nil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesNEQ(*i.DefaultMaxClonesNEQ))
	}
	if len(i.DefaultMaxClonesIn) > 0 {
		predicates = append(predicates, guildsettings.DefaultMaxClonesIn(i.DefaultMaxClonesIn...))
	}
	if len(i.DefaultMaxClonesNotIn) > 0 {
		predicates = append(predicates, guildsettings.DefaultMaxClonesNotIn(i.DefaultMaxClonesNotIn...))
	}
	if i.DefaultMaxClonesGT != nil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesGT(*i.DefaultMaxClonesGT))
	}
	if i.DefaultMaxClonesGTE != nil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesGTE(*i.DefaultMaxClonesGTE))
	}
	if i.DefaultMaxClonesLT != nil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesLT(*i.DefaultMaxClonesLT))
	}
	if i.DefaultMaxClonesLTE != nil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesLTE(*i.DefaultMaxClonesLTE))
	}
	if i.DefaultMaxClonesIsNil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesIsNil())
	}
	if i.DefaultMaxClonesNotNil {
		predicates = append(predicates, guildsettings.DefaultMaxClonesNotNil())
	}
	if i.RegexMatch != nil {
		predicates = append(predicates, guildsettings.RegexMatchEQ(*i.RegexMatch))
	}
	if i.RegexMatchNEQ != nil {
		predicates = append(predicates, guildsettings.RegexMatchNEQ(*i.RegexMatchNEQ))
	}
	if len(i.RegexMatchIn) > 0 {
		predicates = append(predicates, guildsettings.RegexMatchIn(i.RegexMatchIn...))
	}
	if len(i.RegexMatchNotIn) > 0 {
		predicates = append(predicates, guildsettings.RegexMatchNotIn(i.RegexMatchNotIn...))
	}
	if i.RegexMatchGT != nil {
		predicates = append(predicates, guildsettings.RegexMatchGT(*i.RegexMatchGT))
	}
	if i.RegexMatchGTE != nil {
		predicates = append(predicates, guildsettings.RegexMatchGTE(*i.RegexMatchGTE))
	}
	if i.RegexMatchLT != nil {
		predicates = append(predicates, guildsettings.RegexMatchLT(*i.RegexMatchLT))
	}
	if i.RegexMatchLTE != nil {
		predicates = append(predicates, guildsettings.RegexMatchLTE(*i.RegexMatchLTE))
	}
	if i.RegexMatchContains != nil {
		predicates = append(predicates, guildsettings.RegexMatchContains(*i.RegexMatchContains))
	}
	if i.RegexMatchHasPrefix != nil {
		predicates = append(predicates, guildsettings.RegexMatchHasPrefix(*i.RegexMatchHasPrefix))
	}
	if i.RegexMatchHasSuffix != nil {
		predicates = append(predicates, guildsettings.RegexMatchHasSuffix(*i.RegexMatchHasSuffix))
	}
	if i.RegexMatchIsNil {
		predicates = append(predicates, guildsettings.RegexMatchIsNil())
	}
	if i.RegexMatchNotNil {
		predicates = append(predicates, guildsettings.RegexMatchNotNil())
	}
	if i.RegexMatchEqualFold != nil {
		predicates = append(predicates, guildsettings.RegexMatchEqualFold(*i.RegexMatchEqualFold))
	}
	if i.RegexMatchContainsFold != nil {
		predicates = append(predicates, guildsettings.RegexMatchContainsFold(*i.RegexMatchContainsFold))
	}
	if i.ContactEmail != nil {
		predicates = append(predicates, guildsettings.ContactEmailEQ(*i.ContactEmail))
	}
	if i.ContactEmailNEQ != nil {
		predicates = append(predicates, guildsettings.ContactEmailNEQ(*i.ContactEmailNEQ))
	}
	if len(i.ContactEmailIn) > 0 {
		predicates = append(predicates, guildsettings.ContactEmailIn(i.ContactEmailIn...))
	}
	if len(i.ContactEmailNotIn) > 0 {
		predicates = append(predicates, guildsettings.ContactEmailNotIn(i.ContactEmailNotIn...))
	}
	if i.ContactEmailGT != nil {
		predicates = append(predicates, guildsettings.ContactEmailGT(*i.ContactEmailGT))
	}
	if i.ContactEmailGTE != nil {
		predicates = append(predicates, guildsettings.ContactEmailGTE(*i.ContactEmailGTE))
	}
	if i.ContactEmailLT != nil {
		predicates = append(predicates, guildsettings.ContactEmailLT(*i.ContactEmailLT))
	}
	if i.ContactEmailLTE != nil {
		predicates = append(predicates, guildsettings.ContactEmailLTE(*i.ContactEmailLTE))
	}
	if i.ContactEmailContains != nil {
		predicates = append(predicates, guildsettings.ContactEmailContains(*i.ContactEmailContains))
	}
	if i.ContactEmailHasPrefix != nil {
		predicates = append(predicates, guildsettings.ContactEmailHasPrefix(*i.ContactEmailHasPrefix))
	}
	if i.ContactEmailHasSuffix != nil {
		predicates = append(predicates, guildsettings.ContactEmailHasSuffix(*i.ContactEmailHasSuffix))
	}
	if i.ContactEmailIsNil {
		predicates = append(predicates, guildsettings.ContactEmailIsNil())
	}
	if i.ContactEmailNotNil {
		predicates = append(predicates, guildsettings.ContactEmailNotNil())
	}
	if i.ContactEmailEqualFold != nil {
		predicates = append(predicates, guildsettings.ContactEmailEqualFold(*i.ContactEmailEqualFold))
	}
	if i.ContactEmailContainsFold != nil {
		predicates = append(predicates, guildsettings.ContactEmailContainsFold(*i.ContactEmailContainsFold))
	}

	if i.HasGuild != nil {
		p := guildsettings.HasGuild()
		if !*i.HasGuild {
			p = guildsettings.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGuildWith) > 0 {
		with := make([]predicate.Guild, 0, len(i.HasGuildWith))
		for _, w := range i.HasGuildWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGuildWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, guildsettings.HasGuildWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGuildSettingsWhereInput
	case 1:
		return predicates[0], nil
	default:
		return guildsettings.And(predicates...), nil
	}
}
