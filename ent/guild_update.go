// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guild"
	"github.com/lrstanley/ent-relay-conn-bug/ent/guildsettings"
	"github.com/lrstanley/ent-relay-conn-bug/ent/predicate"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	hooks    []Hook
	mutation *GuildMutation
}

// Where appends a list predicates to the GuildUpdate builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdateTime sets the "update_time" field.
func (gu *GuildUpdate) SetUpdateTime(t time.Time) *GuildUpdate {
	gu.mutation.SetUpdateTime(t)
	return gu
}

// SetName sets the "name" field.
func (gu *GuildUpdate) SetName(s string) *GuildUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetFeatures sets the "features" field.
func (gu *GuildUpdate) SetFeatures(s []string) *GuildUpdate {
	gu.mutation.SetFeatures(s)
	return gu
}

// ClearFeatures clears the value of the "features" field.
func (gu *GuildUpdate) ClearFeatures() *GuildUpdate {
	gu.mutation.ClearFeatures()
	return gu
}

// SetIconHash sets the "icon_hash" field.
func (gu *GuildUpdate) SetIconHash(s string) *GuildUpdate {
	gu.mutation.SetIconHash(s)
	return gu
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableIconHash(s *string) *GuildUpdate {
	if s != nil {
		gu.SetIconHash(*s)
	}
	return gu
}

// ClearIconHash clears the value of the "icon_hash" field.
func (gu *GuildUpdate) ClearIconHash() *GuildUpdate {
	gu.mutation.ClearIconHash()
	return gu
}

// SetIconURL sets the "icon_url" field.
func (gu *GuildUpdate) SetIconURL(s string) *GuildUpdate {
	gu.mutation.SetIconURL(s)
	return gu
}

// SetLarge sets the "large" field.
func (gu *GuildUpdate) SetLarge(b bool) *GuildUpdate {
	gu.mutation.SetLarge(b)
	return gu
}

// SetNillableLarge sets the "large" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableLarge(b *bool) *GuildUpdate {
	if b != nil {
		gu.SetLarge(*b)
	}
	return gu
}

// ClearLarge clears the value of the "large" field.
func (gu *GuildUpdate) ClearLarge() *GuildUpdate {
	gu.mutation.ClearLarge()
	return gu
}

// SetMemberCount sets the "member_count" field.
func (gu *GuildUpdate) SetMemberCount(i int) *GuildUpdate {
	gu.mutation.ResetMemberCount()
	gu.mutation.SetMemberCount(i)
	return gu
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableMemberCount(i *int) *GuildUpdate {
	if i != nil {
		gu.SetMemberCount(*i)
	}
	return gu
}

// AddMemberCount adds i to the "member_count" field.
func (gu *GuildUpdate) AddMemberCount(i int) *GuildUpdate {
	gu.mutation.AddMemberCount(i)
	return gu
}

// ClearMemberCount clears the value of the "member_count" field.
func (gu *GuildUpdate) ClearMemberCount() *GuildUpdate {
	gu.mutation.ClearMemberCount()
	return gu
}

// SetOwnerID sets the "owner_id" field.
func (gu *GuildUpdate) SetOwnerID(s string) *GuildUpdate {
	gu.mutation.SetOwnerID(s)
	return gu
}

// SetPermissions sets the "permissions" field.
func (gu *GuildUpdate) SetPermissions(u uint64) *GuildUpdate {
	gu.mutation.ResetPermissions()
	gu.mutation.SetPermissions(u)
	return gu
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (gu *GuildUpdate) SetNillablePermissions(u *uint64) *GuildUpdate {
	if u != nil {
		gu.SetPermissions(*u)
	}
	return gu
}

// AddPermissions adds u to the "permissions" field.
func (gu *GuildUpdate) AddPermissions(u int64) *GuildUpdate {
	gu.mutation.AddPermissions(u)
	return gu
}

// ClearPermissions clears the value of the "permissions" field.
func (gu *GuildUpdate) ClearPermissions() *GuildUpdate {
	gu.mutation.ClearPermissions()
	return gu
}

// SetRegion sets the "region" field.
func (gu *GuildUpdate) SetRegion(s string) *GuildUpdate {
	gu.mutation.SetRegion(s)
	return gu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableRegion(s *string) *GuildUpdate {
	if s != nil {
		gu.SetRegion(*s)
	}
	return gu
}

// ClearRegion clears the value of the "region" field.
func (gu *GuildUpdate) ClearRegion() *GuildUpdate {
	gu.mutation.ClearRegion()
	return gu
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (gu *GuildUpdate) SetSystemChannelFlags(s string) *GuildUpdate {
	gu.mutation.SetSystemChannelFlags(s)
	return gu
}

// SetNillableSystemChannelFlags sets the "system_channel_flags" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableSystemChannelFlags(s *string) *GuildUpdate {
	if s != nil {
		gu.SetSystemChannelFlags(*s)
	}
	return gu
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (gu *GuildUpdate) ClearSystemChannelFlags() *GuildUpdate {
	gu.mutation.ClearSystemChannelFlags()
	return gu
}

// SetGuildSettingsID sets the "guild_settings" edge to the GuildSettings entity by ID.
func (gu *GuildUpdate) SetGuildSettingsID(id int) *GuildUpdate {
	gu.mutation.SetGuildSettingsID(id)
	return gu
}

// SetNillableGuildSettingsID sets the "guild_settings" edge to the GuildSettings entity by ID if the given value is not nil.
func (gu *GuildUpdate) SetNillableGuildSettingsID(id *int) *GuildUpdate {
	if id != nil {
		gu = gu.SetGuildSettingsID(*id)
	}
	return gu
}

// SetGuildSettings sets the "guild_settings" edge to the GuildSettings entity.
func (gu *GuildUpdate) SetGuildSettings(g *GuildSettings) *GuildUpdate {
	return gu.SetGuildSettingsID(g.ID)
}

// Mutation returns the GuildMutation object of the builder.
func (gu *GuildUpdate) Mutation() *GuildMutation {
	return gu.mutation
}

// ClearGuildSettings clears the "guild_settings" edge to the GuildSettings entity.
func (gu *GuildUpdate) ClearGuildSettings() *GuildUpdate {
	gu.mutation.ClearGuildSettings()
	return gu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	if len(gu.hooks) == 0 {
		if err = gu.check(); err != nil {
			return 0, err
		}
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gu.check(); err != nil {
				return 0, err
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GuildUpdate) defaults() error {
	if _, ok := gu.mutation.UpdateTime(); !ok {
		if guild.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guild.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guild.UpdateDefaultUpdateTime()
		gu.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gu *GuildUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.IconHash(); ok {
		if err := guild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_hash": %w`, err)}
		}
	}
	if v, ok := gu.mutation.IconURL(); ok {
		if err := guild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_url": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Region(); ok {
		if err := guild.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Guild.region": %w`, err)}
		}
	}
	if v, ok := gu.mutation.SystemChannelFlags(); ok {
		if err := guild.SystemChannelFlagsValidator(v); err != nil {
			return &ValidationError{Name: "system_channel_flags", err: fmt.Errorf(`ent: validator failed for field "Guild.system_channel_flags": %w`, err)}
		}
	}
	return nil
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guild.Table,
			Columns: guild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guild.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldUpdateTime,
		})
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldName,
		})
	}
	if value, ok := gu.mutation.Features(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldFeatures,
		})
	}
	if gu.mutation.FeaturesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: guild.FieldFeatures,
		})
	}
	if value, ok := gu.mutation.IconHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldIconHash,
		})
	}
	if gu.mutation.IconHashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guild.FieldIconHash,
		})
	}
	if value, ok := gu.mutation.IconURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldIconURL,
		})
	}
	if value, ok := gu.mutation.Large(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: guild.FieldLarge,
		})
	}
	if gu.mutation.LargeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: guild.FieldLarge,
		})
	}
	if value, ok := gu.mutation.MemberCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guild.FieldMemberCount,
		})
	}
	if value, ok := gu.mutation.AddedMemberCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guild.FieldMemberCount,
		})
	}
	if gu.mutation.MemberCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: guild.FieldMemberCount,
		})
	}
	if value, ok := gu.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldOwnerID,
		})
	}
	if value, ok := gu.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldPermissions,
		})
	}
	if value, ok := gu.mutation.AddedPermissions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldPermissions,
		})
	}
	if gu.mutation.PermissionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: guild.FieldPermissions,
		})
	}
	if value, ok := gu.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldRegion,
		})
	}
	if gu.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guild.FieldRegion,
		})
	}
	if value, ok := gu.mutation.SystemChannelFlags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldSystemChannelFlags,
		})
	}
	if gu.mutation.SystemChannelFlagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guild.FieldSystemChannelFlags,
		})
	}
	if gu.mutation.GuildSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildSettingsTable,
			Columns: []string{guild.GuildSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: guildsettings.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GuildSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildSettingsTable,
			Columns: []string{guild.GuildSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: guildsettings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildMutation
}

// SetUpdateTime sets the "update_time" field.
func (guo *GuildUpdateOne) SetUpdateTime(t time.Time) *GuildUpdateOne {
	guo.mutation.SetUpdateTime(t)
	return guo
}

// SetName sets the "name" field.
func (guo *GuildUpdateOne) SetName(s string) *GuildUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetFeatures sets the "features" field.
func (guo *GuildUpdateOne) SetFeatures(s []string) *GuildUpdateOne {
	guo.mutation.SetFeatures(s)
	return guo
}

// ClearFeatures clears the value of the "features" field.
func (guo *GuildUpdateOne) ClearFeatures() *GuildUpdateOne {
	guo.mutation.ClearFeatures()
	return guo
}

// SetIconHash sets the "icon_hash" field.
func (guo *GuildUpdateOne) SetIconHash(s string) *GuildUpdateOne {
	guo.mutation.SetIconHash(s)
	return guo
}

// SetNillableIconHash sets the "icon_hash" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableIconHash(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetIconHash(*s)
	}
	return guo
}

// ClearIconHash clears the value of the "icon_hash" field.
func (guo *GuildUpdateOne) ClearIconHash() *GuildUpdateOne {
	guo.mutation.ClearIconHash()
	return guo
}

// SetIconURL sets the "icon_url" field.
func (guo *GuildUpdateOne) SetIconURL(s string) *GuildUpdateOne {
	guo.mutation.SetIconURL(s)
	return guo
}

// SetLarge sets the "large" field.
func (guo *GuildUpdateOne) SetLarge(b bool) *GuildUpdateOne {
	guo.mutation.SetLarge(b)
	return guo
}

// SetNillableLarge sets the "large" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableLarge(b *bool) *GuildUpdateOne {
	if b != nil {
		guo.SetLarge(*b)
	}
	return guo
}

// ClearLarge clears the value of the "large" field.
func (guo *GuildUpdateOne) ClearLarge() *GuildUpdateOne {
	guo.mutation.ClearLarge()
	return guo
}

// SetMemberCount sets the "member_count" field.
func (guo *GuildUpdateOne) SetMemberCount(i int) *GuildUpdateOne {
	guo.mutation.ResetMemberCount()
	guo.mutation.SetMemberCount(i)
	return guo
}

// SetNillableMemberCount sets the "member_count" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableMemberCount(i *int) *GuildUpdateOne {
	if i != nil {
		guo.SetMemberCount(*i)
	}
	return guo
}

// AddMemberCount adds i to the "member_count" field.
func (guo *GuildUpdateOne) AddMemberCount(i int) *GuildUpdateOne {
	guo.mutation.AddMemberCount(i)
	return guo
}

// ClearMemberCount clears the value of the "member_count" field.
func (guo *GuildUpdateOne) ClearMemberCount() *GuildUpdateOne {
	guo.mutation.ClearMemberCount()
	return guo
}

// SetOwnerID sets the "owner_id" field.
func (guo *GuildUpdateOne) SetOwnerID(s string) *GuildUpdateOne {
	guo.mutation.SetOwnerID(s)
	return guo
}

// SetPermissions sets the "permissions" field.
func (guo *GuildUpdateOne) SetPermissions(u uint64) *GuildUpdateOne {
	guo.mutation.ResetPermissions()
	guo.mutation.SetPermissions(u)
	return guo
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillablePermissions(u *uint64) *GuildUpdateOne {
	if u != nil {
		guo.SetPermissions(*u)
	}
	return guo
}

// AddPermissions adds u to the "permissions" field.
func (guo *GuildUpdateOne) AddPermissions(u int64) *GuildUpdateOne {
	guo.mutation.AddPermissions(u)
	return guo
}

// ClearPermissions clears the value of the "permissions" field.
func (guo *GuildUpdateOne) ClearPermissions() *GuildUpdateOne {
	guo.mutation.ClearPermissions()
	return guo
}

// SetRegion sets the "region" field.
func (guo *GuildUpdateOne) SetRegion(s string) *GuildUpdateOne {
	guo.mutation.SetRegion(s)
	return guo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableRegion(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetRegion(*s)
	}
	return guo
}

// ClearRegion clears the value of the "region" field.
func (guo *GuildUpdateOne) ClearRegion() *GuildUpdateOne {
	guo.mutation.ClearRegion()
	return guo
}

// SetSystemChannelFlags sets the "system_channel_flags" field.
func (guo *GuildUpdateOne) SetSystemChannelFlags(s string) *GuildUpdateOne {
	guo.mutation.SetSystemChannelFlags(s)
	return guo
}

// SetNillableSystemChannelFlags sets the "system_channel_flags" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableSystemChannelFlags(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetSystemChannelFlags(*s)
	}
	return guo
}

// ClearSystemChannelFlags clears the value of the "system_channel_flags" field.
func (guo *GuildUpdateOne) ClearSystemChannelFlags() *GuildUpdateOne {
	guo.mutation.ClearSystemChannelFlags()
	return guo
}

// SetGuildSettingsID sets the "guild_settings" edge to the GuildSettings entity by ID.
func (guo *GuildUpdateOne) SetGuildSettingsID(id int) *GuildUpdateOne {
	guo.mutation.SetGuildSettingsID(id)
	return guo
}

// SetNillableGuildSettingsID sets the "guild_settings" edge to the GuildSettings entity by ID if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableGuildSettingsID(id *int) *GuildUpdateOne {
	if id != nil {
		guo = guo.SetGuildSettingsID(*id)
	}
	return guo
}

// SetGuildSettings sets the "guild_settings" edge to the GuildSettings entity.
func (guo *GuildUpdateOne) SetGuildSettings(g *GuildSettings) *GuildUpdateOne {
	return guo.SetGuildSettingsID(g.ID)
}

// Mutation returns the GuildMutation object of the builder.
func (guo *GuildUpdateOne) Mutation() *GuildMutation {
	return guo.mutation
}

// ClearGuildSettings clears the "guild_settings" edge to the GuildSettings entity.
func (guo *GuildUpdateOne) ClearGuildSettings() *GuildUpdateOne {
	guo.mutation.ClearGuildSettings()
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuildUpdateOne) Select(field string, fields ...string) *GuildUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guild entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	var (
		err  error
		node *Guild
	)
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	if len(guo.hooks) == 0 {
		if err = guo.check(); err != nil {
			return nil, err
		}
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guo.check(); err != nil {
				return nil, err
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Guild)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GuildMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GuildUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdateTime(); !ok {
		if guild.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized guild.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := guild.UpdateDefaultUpdateTime()
		guo.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (guo *GuildUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.IconHash(); ok {
		if err := guild.IconHashValidator(v); err != nil {
			return &ValidationError{Name: "icon_hash", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_hash": %w`, err)}
		}
	}
	if v, ok := guo.mutation.IconURL(); ok {
		if err := guild.IconURLValidator(v); err != nil {
			return &ValidationError{Name: "icon_url", err: fmt.Errorf(`ent: validator failed for field "Guild.icon_url": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Region(); ok {
		if err := guild.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`ent: validator failed for field "Guild.region": %w`, err)}
		}
	}
	if v, ok := guo.mutation.SystemChannelFlags(); ok {
		if err := guild.SystemChannelFlagsValidator(v); err != nil {
			return &ValidationError{Name: "system_channel_flags", err: fmt.Errorf(`ent: validator failed for field "Guild.system_channel_flags": %w`, err)}
		}
	}
	return nil
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (_node *Guild, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guild.Table,
			Columns: guild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guild.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guild.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guild.FieldID)
		for _, f := range fields {
			if !guild.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guild.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldUpdateTime,
		})
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldName,
		})
	}
	if value, ok := guo.mutation.Features(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldFeatures,
		})
	}
	if guo.mutation.FeaturesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: guild.FieldFeatures,
		})
	}
	if value, ok := guo.mutation.IconHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldIconHash,
		})
	}
	if guo.mutation.IconHashCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guild.FieldIconHash,
		})
	}
	if value, ok := guo.mutation.IconURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldIconURL,
		})
	}
	if value, ok := guo.mutation.Large(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: guild.FieldLarge,
		})
	}
	if guo.mutation.LargeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: guild.FieldLarge,
		})
	}
	if value, ok := guo.mutation.MemberCount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guild.FieldMemberCount,
		})
	}
	if value, ok := guo.mutation.AddedMemberCount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: guild.FieldMemberCount,
		})
	}
	if guo.mutation.MemberCountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: guild.FieldMemberCount,
		})
	}
	if value, ok := guo.mutation.OwnerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldOwnerID,
		})
	}
	if value, ok := guo.mutation.Permissions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldPermissions,
		})
	}
	if value, ok := guo.mutation.AddedPermissions(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: guild.FieldPermissions,
		})
	}
	if guo.mutation.PermissionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: guild.FieldPermissions,
		})
	}
	if value, ok := guo.mutation.Region(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldRegion,
		})
	}
	if guo.mutation.RegionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guild.FieldRegion,
		})
	}
	if value, ok := guo.mutation.SystemChannelFlags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldSystemChannelFlags,
		})
	}
	if guo.mutation.SystemChannelFlagsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: guild.FieldSystemChannelFlags,
		})
	}
	if guo.mutation.GuildSettingsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildSettingsTable,
			Columns: []string{guild.GuildSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: guildsettings.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GuildSettingsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   guild.GuildSettingsTable,
			Columns: []string{guild.GuildSettingsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: guildsettings.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guild{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
